import { adoptStyles, css, } from 'lit';
import { getTheme } from './config.js';
import { CHANGE_THEME_EVENT } from './theming-event.js';
class ThemingController {
    constructor(host, themes) {
        this.__themingEventHandler = () => {
            this.adoptStyles();
            this.host.requestUpdate();
        };
        this.host = host;
        this.themes = themes;
    }
    hostConnected() {
        this.adoptStyles();
        window.addEventListener(CHANGE_THEME_EVENT, this.__themingEventHandler);
    }
    hostDisconnected() {
        window.removeEventListener(CHANGE_THEME_EVENT, this.__themingEventHandler);
    }
    adoptStyles() {
        this.theme = getTheme();
        const ctor = this.host.constructor;
        const supportsAdoptingStyleSheets = window.ShadowRoot &&
            'adoptedStyleSheets' in Document.prototype &&
            'replace' in CSSStyleSheet.prototype;
        let styleSheet = css ``;
        const [theme] = Object.entries(this.themes).filter(([name]) => name === this.theme);
        if (theme) {
            const [_, cssResult] = theme;
            styleSheet = cssResult;
        }
        if (!supportsAdoptingStyleSheets) {
            [...this.host.renderRoot.querySelectorAll('style')]
                .slice(1)
                .forEach((tag) => tag.remove());
        }
        adoptStyles(this.host.shadowRoot, [
            ...ctor.elementStyles,
            styleSheet,
        ]);
    }
}
const _updateWhenThemeChanges = (host, themes) => {
    const controller = new ThemingController(host, themes);
    host.addController(controller);
    return controller;
};
export const updateWhenThemeChanges = _updateWhenThemeChanges;
//# sourceMappingURL=theming-controller.js.map