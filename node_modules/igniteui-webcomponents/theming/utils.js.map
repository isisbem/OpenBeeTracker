{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/theming/utils.ts"],"names":[],"mappings":"AACA,MAAM,aAAa,GAAG,CAAC,GAAW,EAAE,EAAE,CACpC,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AAElE,MAAM,sBAAsB,GAAG,CAC7B,cAA8B,QAAQ,CAAC,WAAW,EAClD,EAAE;IACF,MAAM,OAAO,GAAa,EAAE,CAAC;IAE7B,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,EAAE;QAC7C,IAAI;YACF,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,IAAS,EAAE,EAAE;gBACpD,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;oBAC3B,OAAO;iBACR;gBAED,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,KAAU,EAAE,EAAE;oBAC/C,IAAI,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,EAAE;wBAC1D,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;qBACrB;gBACH,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;SACJ;QAAC,OAAO,CAAC,EAAE,GAAE;IAChB,CAAC,CAAC,CAAC;IAEH,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC;AAEF,MAAM,sBAAsB,GAAG,CAC7B,UAAyB,EACzB,UAAuB,QAAQ,CAAC,IAAI,EACpC,SAA6B,EAAE,EAC/B,EAAE;IACF,MAAM,QAAQ,GAAG,MAAM,CAAC,gBAAgB,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;IAC1D,MAAM,OAAO,GAAG,EAAE,CAAC;IAEnB,UAAU,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;QACzB,MAAM,KAAK,GAAG,QAAQ,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;QAE7C,IAAI,KAAK,EAAE;YACR,OAAe,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC;SACrD;IACH,CAAC,CAAC,CAAC;IAEH,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,kBAAkB,GAAG,GAA2B,EAAE;IAC7D,MAAM,OAAO,GAAG,sBAAsB,EAAE,CAAC;IACzC,OAAO,sBAAsB,CAAC,OAAO,EAAE,QAAQ,CAAC,eAAe,CAAC,CAAC;AACnE,CAAC,CAAC","sourcesContent":["/*eslint no-empty: ['error', {allowEmptyCatch: true}]*/\nconst CssKeyToJsKey = (key: string) =>\n  key.replace('--', '').replace(/-./g, (x) => x.toUpperCase()[1]);\n\nconst getAllCSSVariableNames = (\n  styleSheets: StyleSheetList = document.styleSheets\n) => {\n  const cssVars: string[] = [];\n\n  Array.from(styleSheets).forEach((styleSheet) => {\n    try {\n      Array.from(styleSheet.cssRules).forEach((rule: any) => {\n        if (!rule || !rule['style']) {\n          return;\n        }\n\n        Array.from(rule['style']).forEach((style: any) => {\n          if (style.startsWith('--') && cssVars.indexOf(style) == -1) {\n            cssVars.push(style);\n          }\n        });\n      });\n    } catch (e) {}\n  });\n\n  return cssVars;\n};\n\nconst getElementCSSVariables = (\n  allCSSVars: Array<string>,\n  element: HTMLElement = document.body,\n  pseudo: string | undefined = ''\n) => {\n  const elStyles = window.getComputedStyle(element, pseudo);\n  const cssVars = {};\n\n  allCSSVars.forEach((key) => {\n    const value = elStyles.getPropertyValue(key);\n\n    if (value) {\n      (cssVars as any)[CssKeyToJsKey(key)] = value.trim();\n    }\n  });\n\n  return cssVars;\n};\n\nexport const getAllCSSVariables = (): Record<string, string> => {\n  const cssVars = getAllCSSVariableNames();\n  return getElementCSSVariables(cssVars, document.documentElement);\n};\n"]}