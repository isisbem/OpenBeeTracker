var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var IgcRadioComponent_1;
import { html, LitElement } from 'lit';
import { property, query, queryAssignedNodes, state } from 'lit/decorators.js';
import { ifDefined } from 'lit/directives/if-defined.js';
import { live } from 'lit/directives/live.js';
import { themes } from '../../theming/theming-decorator.js';
import { alternateName } from '../common/decorators/alternateName.js';
import { blazorTwoWayBind } from '../common/decorators/blazorTwoWayBind.js';
import { watch } from '../common/decorators/watch.js';
import { EventEmitterMixin } from '../common/mixins/event-emitter.js';
import { createCounter, partNameMap } from '../common/util.js';
import { styles } from './themes/light/radio.base.css.js';
import { styles as bootstrap } from './themes/light/radio.bootstrap.css.js';
import { styles as fluent } from './themes/light/radio.fluent.css.js';
import { styles as indigo } from './themes/light/radio.indigo.css.js';
import { styles as material } from './themes/light/radio.material.css.js';
let IgcRadioComponent = IgcRadioComponent_1 = class IgcRadioComponent extends EventEmitterMixin(LitElement) {
    constructor() {
        super(...arguments);
        this.inputId = `radio-${IgcRadioComponent_1.increment()}`;
        this.labelId = `radio-label-${this.inputId}`;
        this._tabIndex = 0;
        this.focused = false;
        this.hideLabel = false;
        this.required = false;
        this.checked = false;
        this.disabled = false;
        this.invalid = false;
        this.labelPosition = 'after';
    }
    click() {
        this.input.click();
    }
    connectedCallback() {
        super.connectedCallback();
        this.addEventListener('keyup', this.handleKeyUp);
    }
    disconnectedCallback() {
        this.removeEventListener('keyup', this.handleKeyUp);
        super.disconnectedCallback();
    }
    handleKeyUp() {
        if (!this.focused) {
            this.focused = true;
        }
    }
    focus(options) {
        this.input.focus(options);
    }
    blur() {
        this.input.blur();
    }
    reportValidity() {
        return this.input.reportValidity();
    }
    checkValidity() {
        return this.input.checkValidity();
    }
    setCustomValidity(message) {
        this.input.setCustomValidity(message);
        this.invalid = !this.input.checkValidity();
    }
    handleMouseDown(event) {
        event.preventDefault();
        this.input.focus();
        this.focused = false;
    }
    handleClick() {
        this.checked = true;
    }
    handleBlur() {
        this.emitEvent('igcBlur');
        this.focused = false;
    }
    handleFocus() {
        this.emitEvent('igcFocus');
    }
    handleChange() {
        if (this.checked) {
            this.getSiblings().forEach((radio) => {
                radio.checked = false;
                radio._tabIndex = -1;
            });
            this.input.focus();
            this._tabIndex = 0;
            this.emitEvent('igcChange', { detail: this.checked });
        }
        else {
            if (this.required) {
                this.required = false;
                this.getAllInGroup()[0].required = true;
            }
        }
    }
    getSiblings() {
        return this.getAllInGroup().filter((radio) => radio.name === this.name && radio !== this);
    }
    getAllInGroup() {
        const group = this.closest('igc-radio-group');
        if (!group)
            return [];
        return Array.from(group.querySelectorAll('igc-radio'));
    }
    async firstUpdated() {
        if (this.label.length === 0) {
            this.hideLabel = true;
        }
        await this.updateComplete;
    }
    render() {
        return html `
      <label
        part="${partNameMap({
            base: true,
            checked: this.checked,
            focused: this.focused,
        })}"
        for="${this.inputId}"
        @pointerdown="${this.handleMouseDown}"
      >
        <input
          id="${this.inputId}"
          type="radio"
          name="${ifDefined(this.name)}"
          value="${ifDefined(this.value)}"
          .required="${this.required}"
          .disabled="${this.disabled}"
          .checked="${live(this.checked)}"
          tabindex=${this._tabIndex}
          aria-checked="${this.checked ? 'true' : 'false'}"
          aria-disabled="${this.disabled ? 'true' : 'false'}"
          aria-labelledby="${this.ariaLabelledby
            ? this.ariaLabelledby
            : this.labelId}"
          @click="${this.handleClick}"
          @blur="${this.handleBlur}"
          @focus="${this.handleFocus}"
        />
        <span
          part="${partNameMap({ control: true, checked: this.checked })}"
        ></span>
        <span
          .hidden="${this.hideLabel}"
          part="${partNameMap({ label: true, checked: this.checked })}"
          id="${this.labelId}"
        >
          <slot></slot>
        </span>
      </label>
    `;
    }
};
IgcRadioComponent.tagName = 'igc-radio';
IgcRadioComponent.styles = styles;
IgcRadioComponent.increment = createCounter();
__decorate([
    query('input[type="radio"]', true)
], IgcRadioComponent.prototype, "input", void 0);
__decorate([
    queryAssignedNodes({ flatten: true })
], IgcRadioComponent.prototype, "label", void 0);
__decorate([
    state()
], IgcRadioComponent.prototype, "_tabIndex", void 0);
__decorate([
    state()
], IgcRadioComponent.prototype, "focused", void 0);
__decorate([
    state()
], IgcRadioComponent.prototype, "hideLabel", void 0);
__decorate([
    property()
], IgcRadioComponent.prototype, "name", void 0);
__decorate([
    property()
], IgcRadioComponent.prototype, "value", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], IgcRadioComponent.prototype, "required", void 0);
__decorate([
    property({ type: Boolean }),
    blazorTwoWayBind('igcChange', 'detail')
], IgcRadioComponent.prototype, "checked", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], IgcRadioComponent.prototype, "disabled", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], IgcRadioComponent.prototype, "invalid", void 0);
__decorate([
    property({ reflect: true, attribute: 'label-position' })
], IgcRadioComponent.prototype, "labelPosition", void 0);
__decorate([
    property({ reflect: true, attribute: 'aria-labelledby' })
], IgcRadioComponent.prototype, "ariaLabelledby", void 0);
__decorate([
    alternateName('focusComponent')
], IgcRadioComponent.prototype, "focus", null);
__decorate([
    alternateName('blurComponent')
], IgcRadioComponent.prototype, "blur", null);
__decorate([
    watch('checked', { waitUntilFirstUpdate: true })
], IgcRadioComponent.prototype, "handleChange", null);
IgcRadioComponent = IgcRadioComponent_1 = __decorate([
    themes({ material, bootstrap, fluent, indigo })
], IgcRadioComponent);
export default IgcRadioComponent;
//# sourceMappingURL=radio.js.map