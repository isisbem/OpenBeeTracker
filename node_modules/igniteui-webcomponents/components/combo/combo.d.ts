import { LitElement, TemplateResult } from 'lit';
import IgcInputComponent from '../input/input.js';
import { NavigationController } from './controllers/navigation.js';
import { SelectionController } from './controllers/selection.js';
import { IgcToggleController } from '../toggle/toggle.controller.js';
import { DataController } from './controllers/data.js';
import { IgcToggleComponent } from '../toggle/types.js';
import { Keys, ComboRecord, GroupingDirection, FilteringOptions, IgcComboEventMap, ComboItemTemplate, Item } from './types.js';
import { Constructor } from '../common/mixins/constructor.js';
import type { ThemeController, Theme } from '../../theming/types.js';
declare const IgcComboComponent_base: import("../common/mixins/constructor.js").AbstractConstructor<import("../common/mixins/event-emitter.js").EventEmitterInterface<IgcComboEventMap>> & Constructor<LitElement>;
/**
 * @element igc-combo
 *
 * @slot prefix - Renders content before the input.
 * @slot suffix - Renders content after input.
 * @slot header - Renders a container before the list of options.
 * @slot footer - Renders a container after the list of options.
 * @slot helper-text - Renders content below the input.
 * @slot toggle-icon - Renders content inside the suffix container.
 * @slot clear-icon - Renders content inside the suffix container.
 *
 * @fires igcFocus - Emitted when the select gains focus.
 * @fires igcBlur - Emitted when the select loses focus.
 * @fires igcChange - Emitted when the control's selection has changed.
 * @fires igcOpening - Emitted just before the list of options is opened.
 * @fires igcOpened - Emitted after the list of options is opened.
 * @fires igcClosing - Emitter just before the list of options is closed.
 * @fires igcClosed - Emitted after the list of options is closed.
 *
 * @csspart label - The encapsulated text label.
 * @csspart input - The main input field.
 * @csspart native-input - The native input of the main input field.
 * @csspart prefix - The prefix wrapper.
 * @csspart suffix - The suffix wrapper.
 * @csspart toggle-icon - The toggle icon wrapper.
 * @csspart clear-icon - The clear icon wrapper.
 * @csspart case-icon - The case icon wrapper.
 * @csspart helper-text - The helper text wrapper.
 * @csspart search-input - The search input field.
 * @csspart list-wrapper - The list of options wrapper.
 * @csspart list - The list of options box.
 * @csspart item - Represents each item in the list of options.
 * @csspart group-header - Represents each header in the list of options.
 * @csspart active - Appended to the item parts list when the item is active.
 * @csspart selected - Appended to the item parts list when the item is selected.
 * @csspart checkbox - Represents each checkbox of each list item.
 * @csspart checkbox-indicator - Represents the checkbox indicator of each list item.
 * @csspart checked - Appended to checkbox parts list when checkbox is checked.
 * @csspart header - The container holding the header content.
 * @csspart footer - The container holding the footer content.
 * @csspart empty - The container holding the empty content.
 */
export default class IgcComboComponent<T extends object> extends IgcComboComponent_base implements Partial<IgcToggleComponent> {
    static readonly tagName = "igc-combo";
    static styles: import("lit").CSSResult;
    private _value;
    protected navigationController: NavigationController<T>;
    protected selectionController: SelectionController<T>;
    protected dataController: DataController<T>;
    protected toggleController: IgcToggleController;
    protected themeController: ThemeController;
    protected theme: Theme;
    protected helperText: Array<HTMLElement>;
    protected inputSuffix: Array<HTMLElement>;
    protected inputPrefix: Array<HTMLElement>;
    protected input: IgcInputComponent;
    private target;
    private list;
    /** The data source used to generate the list of options. */
    data: Array<T>;
    /**
     * The name attribute of the control.
     * @attr name
     */
    name: string;
    /**
     * The disabled attribute of the control.
     * @attr disabled
     */
    disabled: boolean;
    /**
     * The required attribute of the control.
     * @attr required
     */
    required: boolean;
    /**
     * The invalid attribute of the control.
     * @attr invalid
     */
    invalid: boolean;
    /**
     * The outlined attribute of the control.
     * @attr outlined
     */
    outlined: boolean;
    /**
     * Enables single selection mode and moves item filtering to the main input.
     * @attr single-select
     */
    singleSelect: boolean;
    /**
     * The autofocus attribute of the control.
     * @attr autofocus
     */
    autofocus: boolean;
    /**
     * Focuses the list of options when the menu opens.
     * @attr autofocus-list
     */
    autofocusList: boolean;
    /**
     * The label attribute of the control.
     * @attr label
     */
    label: string;
    /**
     * The placeholder attribute of the control.
     * @attr placeholder
     */
    placeholder: string;
    /**
     * The placeholder attribute of the search input.
     * @attr placeholder-search
     */
    placeholderSearch: string;
    /**
     * The direction attribute of the control.
     * @attr dir
     */
    dir: 'ltr' | 'rtl' | 'auto';
    /**
     * Sets the open state of the component.
     * @attr open
     */
    open: boolean;
    /** @hidden @internal */
    flip: boolean;
    /**
     * The key in the data source used when selecting items.
     * @attr value-key
     */
    valueKey?: Keys<T>;
    /**
     * The key in the data source used to display items in the list.
     * @attr display-key
     */
    displayKey?: Keys<T>;
    /**
     * The key in the data source used to group items in the list.
     * @attr group-key
     */
    groupKey?: Keys<T>;
    /**
     * Sorts the items in each group by ascending or descending order.
     * @attr group-sorting
     * @type {"asc" | "desc"}
     */
    groupSorting: GroupingDirection;
    /**
     * An object that configures the filtering of the combo.
     * @attr filtering-options
     * @type {FilteringOptions<T>}
     * @param filterKey - The key in the data source used when filtering the list of options.
     * @param caseSensitive - Determines whether the filtering operation should be case sensitive.
     */
    filteringOptions: FilteringOptions<T>;
    /**
     * Enables the case sensitive search icon in the filtering input.
     * @attr case-sensitive-icon
     */
    caseSensitiveIcon: boolean;
    /**
     * Disables the filtering of the list of options.
     * @attr disable-filtering
     */
    disableFiltering: boolean;
    /**
     * The template used for the content of each combo item.
     * @type {ComboItemTemplate<T>}
     */
    itemTemplate: ComboItemTemplate<T>;
    /**
     * The template used for the content of each combo group header.
     * @type {ComboItemTemplate<T>}
     */
    groupHeaderTemplate: ComboItemTemplate<T>;
    protected dataState: Array<ComboRecord<T>>;
    protected dataChanged(): void;
    protected updateDisplayKey(): void;
    protected updateFilterKey(): void;
    protected pipeline(): Promise<void>;
    protected toggleDirectiveChange(): void;
    constructor();
    protected themeAdopted(controller: ThemeController): void;
    protected willUpdate(): void;
    protected getUpdateComplete(): Promise<boolean>;
    protected resetSearchTerm(): void;
    protected resetState(): Promise<void>;
    /**
     * Returns the current selection as a list of commma separated values,
     * represented by the display key, when provided.
     */
    get value(): string;
    protected updateValue(): Promise<void>;
    protected validate(): void;
    /** Checks the validity of the control. */
    reportValidity(): boolean;
    /** A wrapper around the reportValidity method to comply with the native input API. */
    checkValidity(): boolean;
    /** Sets focus on the component. */
    focus(options?: FocusOptions): void;
    /** Removes focus from the component. */
    blur(): void;
    protected normalizeSelection(items?: Item<T> | Item<T>[]): Item<T>[];
    /**
     * Selects option(s) in the list by either reference or valueKey.
     * If not argument is provided all items will be selected.
     * @param { Item<T> | Items<T> } items - One or more items to be selected. Multiple items should be passed as an array.
     * When valueKey is specified, the corresponding value should be used in place of the item reference.
     * @example
     * ```typescript
     * const combo<IgcComboComponent<T>> = document.querySelector('igc-combo');
     *
     * // Select one item at a time by reference when valueKey is not specified.
     * combo.select(combo.data[0]);
     *
     * // Select multiple items at a time by reference when valueKey is not specified.
     * combo.select([combo.data[0], combo.data[1]]);
     *
     * // Select one item at a time when valueKey is specified.
     * combo.select('BG01');
     *
     * // Select multiple items at a time when valueKey is specified.
     * combo.select(['BG01', 'BG02']);
     * ```
     */
    select(items?: Item<T> | Item<T>[]): void;
    /**
     * Deselects option(s) in the list by either reference or valueKey.
     * If not argument is provided all items will be deselected.
     * @param { Item<T> | Items<T> } items - One or more items to be deselected. Multiple items should be passed as an array.
     * When valueKey is specified, the corresponding value should be used in place of the item reference.
     * @example
     * ```typescript
     * const combo<IgcComboComponent<T>> = document.querySelector('igc-combo');
     *
     * // Deselect one item at a time by reference when valueKey is not specified.
     * combo.deselect(combo.data[0]);
     *
     * // Deselect multiple items at a time by reference when valueKey is not specified.
     * combo.deselect([combo.data[0], combo.data[1]]);
     *
     * // Deselect one item at a time when valueKey is specified.
     * combo.deselect('BG01');
     *
     * // Deselect multiple items at a time when valueKey is specified.
     * combo.deselect(['BG01', 'BG02']);
     * ```
     */
    deselect(items?: Item<T> | Item<T>[]): void;
    protected handleMainInput(e: CustomEvent): Promise<void>;
    protected handleSearchInput(e: CustomEvent): void;
    protected handleOpening(): boolean;
    protected handleClosing(): boolean;
    protected _show(emit?: boolean): Promise<void>;
    /** Shows the list of options. */
    show(): void;
    protected _hide(emit?: boolean): Promise<void>;
    /** Hides the list of options. */
    hide(): void;
    /** @hidden @internal */
    _toggle(emit?: boolean): void;
    /** Toggles the list of options. */
    toggle(): void;
    protected itemRenderer: (item: T, index: number) => TemplateResult;
    protected listKeydownHandler(event: KeyboardEvent): void;
    protected itemClickHandler(event: MouseEvent): void;
    protected toggleSelect(index: number): void;
    protected navigateTo(item: T): void;
    protected clearSingleSelection(): void;
    protected handleClearIconClick(e: MouseEvent): void;
    protected handleMainInputKeydown(e: KeyboardEvent): void;
    protected handleSearchInputKeydown(e: KeyboardEvent): void;
    protected toggleCaseSensitivity(): void;
    protected get hasPrefixes(): boolean;
    protected get hasSuffixes(): boolean;
    private renderToggleIcon;
    private renderClearIcon;
    private renderMainInput;
    private renderSearchInput;
    private renderEmptyTemplate;
    private renderList;
    private renderHelperText;
    protected render(): TemplateResult<1>;
}
declare global {
    interface HTMLElementTagNameMap {
        'igc-combo': IgcComboComponent<object>;
    }
}
export {};
