var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { html, LitElement } from 'lit';
import { themes } from '../../theming/theming-decorator.js';
import { styles } from './themes/light/combo.base.css.js';
import { styles as bootstrap } from './themes/light/combo.bootstrap.css.js';
import { styles as material } from './themes/light/combo.material.css.js';
import { styles as fluent } from './themes/light/combo.fluent.css.js';
import { styles as indigo } from './themes/light/combo.indigo.css.js';
import { property, query, queryAssignedElements, state, } from 'lit/decorators.js';
import { watch } from '../common/decorators/watch.js';
import { defineComponents } from '../common/definitions/defineComponents.js';
import IgcComboListComponent from './combo-list.js';
import IgcComboItemComponent from './combo-item.js';
import IgcComboHeaderComponent from './combo-header.js';
import IgcInputComponent from '../input/input.js';
import IgcIconComponent from '../icon/icon.js';
import { NavigationController } from './controllers/navigation.js';
import { SelectionController } from './controllers/selection.js';
import { IgcToggleController } from '../toggle/toggle.controller.js';
import { DataController } from './controllers/data.js';
import { ifDefined } from 'lit/directives/if-defined.js';
import { partNameMap } from '../common/util.js';
import { filteringOptionsConverter } from './utils/converters.js';
import { EventEmitterMixin } from '../common/mixins/event-emitter.js';
import { blazorAdditionalDependencies } from '../common/decorators/blazorAdditionalDependencies.js';
import { blazorIndirectRender } from '../common/decorators/blazorIndirectRender.js';
defineComponents(IgcIconComponent, IgcComboListComponent, IgcComboItemComponent, IgcComboHeaderComponent, IgcInputComponent);
let IgcComboComponent = class IgcComboComponent extends EventEmitterMixin(LitElement) {
    dataChanged() {
        this.dataState = structuredClone(this.data);
        if (this.hasUpdated) {
            this.pipeline();
        }
    }
    updateDisplayKey() {
        var _a;
        this.displayKey = (_a = this.displayKey) !== null && _a !== void 0 ? _a : this.valueKey;
    }
    updateFilterKey() {
        var _a;
        this.filteringOptions.filterKey =
            (_a = this.filteringOptions.filterKey) !== null && _a !== void 0 ? _a : this.displayKey;
    }
    async pipeline() {
        this.dataState = await this.dataController.apply([...this.data]);
    }
    toggleDirectiveChange() {
        if (!this.target)
            return;
        this.toggleController.target = this.target;
        this.target.setAttribute('aria-expanded', this.open ? 'true' : 'false');
    }
    constructor() {
        super();
        this._value = '';
        this.navigationController = new NavigationController(this);
        this.selectionController = new SelectionController(this);
        this.dataController = new DataController(this);
        this.data = [];
        this.disabled = false;
        this.required = false;
        this.invalid = false;
        this.outlined = false;
        this.singleSelect = false;
        this.autofocusList = false;
        this.placeholderSearch = 'Search';
        this.dir = 'auto';
        this.open = false;
        this.flip = true;
        this.displayKey = this.valueKey;
        this.groupKey = this.displayKey;
        this.groupSorting = 'asc';
        this.filteringOptions = {
            filterKey: this.displayKey,
            caseSensitive: false,
        };
        this.caseSensitiveIcon = false;
        this.disableFiltering = false;
        this.itemTemplate = ({ item }) => {
            if (typeof item !== 'object' || item === null) {
                return String(item);
            }
            if (this.displayKey) {
                return html `${item[this.displayKey]}`;
            }
            return html `${String(item)}`;
        };
        this.groupHeaderTemplate = ({ item }) => {
            return html `${this.groupKey && item[this.groupKey]}`;
        };
        this.dataState = [];
        this.itemRenderer = (item, index) => {
            const record = item;
            const dataItem = this.data.at(record.dataIndex);
            const active = this.navigationController.active === index;
            const selected = this.selectionController.selected.has(dataItem);
            const headerTemplate = html `<igc-combo-header part="group-header"
      >${this.groupHeaderTemplate({ item: record })}</igc-combo-header
    >`;
            const itemParts = partNameMap({
                item: true,
                selected,
                active,
            });
            const itemTemplate = html `<igc-combo-item
      part="${itemParts}"
      exportparts="checkbox, checkbox-indicator, checked"
      @click=${this.itemClickHandler.bind(this)}
      .index=${index}
      .active=${active}
      ?selected=${selected}
      ?hide-checkbox=${this.singleSelect}
      >${this.itemTemplate({ item: record })}</igc-combo-item
    >`;
            return html `${this.groupKey && record.header
                ? headerTemplate
                : itemTemplate}`;
        };
        this.toggleController = new IgcToggleController(this, {
            target: this.target,
            closeCallback: async () => {
                if (!this.handleClosing())
                    return;
                this.open = false;
                await this.updateComplete;
                this.emitEvent('igcClosed');
            },
        });
        this.addEventListener('focus', () => {
            this.emitEvent('igcFocus');
        });
        this.addEventListener('blur', () => {
            const { selected } = this.selectionController;
            if (selected.size === 0) {
                this.target.value = '';
                this.resetSearchTerm();
            }
            this.emitEvent('igcBlur');
        });
        this.addEventListener('keydown', this.navigationController.navigateHost.bind(this.navigationController));
    }
    themeAdopted(controller) {
        this.themeController = controller;
    }
    willUpdate() {
        this.theme = this.themeController.theme;
    }
    async getUpdateComplete() {
        const result = await super.getUpdateComplete();
        await this.toggleController.rendered;
        return result;
    }
    resetSearchTerm() {
        this.dataController.searchTerm = '';
    }
    async resetState() {
        await this.updateComplete;
        this.selectionController.selected.clear();
        this.updateValue();
        this.resetSearchTerm();
        this.navigationController.active = -1;
    }
    get value() {
        return this._value;
    }
    async updateValue() {
        this._value = this.selectionController.getValue(Array.from(this.selectionController.selected));
        await this.updateComplete;
        this.target.value = this._value;
    }
    validate() {
        this.updateComplete.then(() => this.reportValidity());
    }
    reportValidity() {
        this.invalid = this.required && !this.value;
        return !this.invalid;
    }
    checkValidity() {
        return this.reportValidity();
    }
    focus(options) {
        this.target.focus(options);
    }
    blur() {
        this.target.blur();
    }
    normalizeSelection(items = []) {
        return Array.isArray(items) ? items : [items];
    }
    select(items) {
        const _items = this.normalizeSelection(items);
        this.selectionController.select(_items, false);
        this.list.requestUpdate();
        this.updateValue();
    }
    deselect(items) {
        const _items = this.normalizeSelection(items);
        this.selectionController.deselect(_items, false);
        this.list.requestUpdate();
        this.updateValue();
    }
    async handleMainInput(e) {
        this._show();
        this.dataController.searchTerm = e.detail;
        await this.updateComplete;
        const matchIndex = this.dataState.findIndex((i) => !i.header);
        this.navigationController.active = e.detail.length > 0 ? matchIndex : -1;
        this.list.requestUpdate();
        this.clearSingleSelection();
    }
    handleSearchInput(e) {
        this.dataController.searchTerm = e.detail;
    }
    handleOpening() {
        const args = { cancelable: true };
        return this.emitEvent('igcOpening', args);
    }
    handleClosing() {
        const args = { cancelable: true };
        return this.emitEvent('igcClosing', args);
    }
    async _show(emit = true) {
        if (this.open)
            return;
        if (emit && !this.handleOpening())
            return;
        this.open = true;
        await this.updateComplete;
        emit && this.emitEvent('igcOpened');
        if (!this.singleSelect) {
            this.list.focus();
        }
        if (!this.autofocusList) {
            this.input.focus();
        }
    }
    show() {
        this._show(false);
    }
    async _hide(emit = true) {
        if (!this.open)
            return;
        if (emit && !this.handleClosing())
            return;
        this.open = false;
        await this.updateComplete;
        emit && this.emitEvent('igcClosed');
        this.navigationController.active = -1;
    }
    hide() {
        this._hide(false);
    }
    _toggle(emit = true) {
        this.open ? this._hide(emit) : this._show(emit);
    }
    toggle() {
        this._toggle(false);
    }
    listKeydownHandler(event) {
        const target = event
            .composedPath()
            .find((el) => el instanceof IgcComboListComponent);
        if (target) {
            this.navigationController.navigateList(event, target);
        }
    }
    itemClickHandler(event) {
        const input = this.singleSelect ? this.target : this.input;
        const target = event
            .composedPath()
            .find((el) => el instanceof IgcComboItemComponent);
        this.toggleSelect(target.index);
        input.focus();
        if (this.singleSelect) {
            this._hide();
        }
    }
    toggleSelect(index) {
        const { dataIndex } = this.dataState.at(index);
        this.selectionController.changeSelection(dataIndex);
        this.navigationController.active = index;
        this.updateValue();
        this.list.requestUpdate();
    }
    navigateTo(item) {
        this.navigationController.navigateTo(item, this.list);
    }
    clearSingleSelection() {
        const { selected } = this.selectionController;
        const selection = selected.values().next().value;
        if (selection) {
            const item = this.valueKey ? selection[this.valueKey] : selection;
            this.selectionController.deselect([item], selected.size > 0);
        }
    }
    handleClearIconClick(e) {
        e.stopPropagation();
        if (this.singleSelect) {
            this.resetSearchTerm();
            this.clearSingleSelection();
        }
        else {
            this.selectionController.deselect([], true);
        }
        this.updateValue();
        this.navigationController.active = -1;
        this.list.requestUpdate();
    }
    handleMainInputKeydown(e) {
        this.navigationController.navigateMainInput(e, this.list);
    }
    handleSearchInputKeydown(e) {
        this.navigationController.navigateSearchInput(e, this.list);
    }
    toggleCaseSensitivity() {
        this.filteringOptions.caseSensitive = !this.filteringOptions.caseSensitive;
        this.requestUpdate('pipeline');
    }
    get hasPrefixes() {
        return this.inputPrefix.length > 0;
    }
    get hasSuffixes() {
        return this.inputSuffix.length > 0;
    }
    renderToggleIcon() {
        const openIcon = this.theme === 'material' ? 'keyboard_arrow_up' : 'arrow_drop_up';
        const closeIcon = this.theme === 'material' ? 'keyboard_arrow_down' : 'arrow_drop_down';
        return html `
      <span slot="suffix" part="toggle-icon">
        <slot name="toggle-icon">
          <igc-icon
            name=${this.open ? openIcon : closeIcon}
            collection="internal"
            aria-hidden="true"
          ></igc-icon>
        </slot>
      </span>
    `;
    }
    renderClearIcon() {
        const { selected } = this.selectionController;
        const icon = this.theme === 'material' ? 'chip_cancel' : 'clear';
        return html `<span
      slot="suffix"
      part="clear-icon"
      @click=${this.handleClearIconClick}
      ?hidden=${selected.size === 0}
    >
      <slot name="clear-icon">
        <igc-icon
          name="${icon}"
          collection="internal"
          aria-hidden="true"
        ></igc-icon>
      </slot>
    </span>`;
    }
    renderMainInput() {
        return html `<igc-input
      id="target"
      role="combobox"
      aria-owns="dropdown"
      aria-describedby="helper-text"
      aria-disabled=${this.disabled}
      exportparts="container: input, input: native-input, label, prefix, suffix"
      @click=${(e) => {
            e.preventDefault();
            this._toggle(true);
        }}
      placeholder=${ifDefined(this.placeholder)}
      label=${ifDefined(this.label)}
      dir=${this.dir}
      @igcChange=${(e) => e.stopPropagation()}
      @igcFocus=${(e) => {
            e.stopPropagation();
            requestAnimationFrame(() => {
                this.target.select();
            });
        }}
      @igcBlur=${(e) => e.stopPropagation()}
      @igcInput=${this.handleMainInput}
      @keydown=${this.handleMainInputKeydown}
      .disabled=${this.disabled}
      .required=${this.required}
      .invalid=${this.invalid}
      .outlined=${this.outlined}
      .autofocus=${this.autofocus}
      ?readonly=${!this.singleSelect}
    >
      <span slot=${this.hasPrefixes && 'prefix'}>
        <slot name="prefix"></slot>
      </span>
      ${this.renderClearIcon()}
      <span slot=${this.hasSuffixes && 'suffix'}>
        <slot name="suffix"></slot>
      </span>
      ${this.renderToggleIcon()}
    </igc-input>`;
    }
    renderSearchInput() {
        var _a;
        return html `<div
      part="filter-input"
      ?hidden=${this.disableFiltering || this.singleSelect}
    >
      <igc-input
        part="search-input"
        placeholder=${this.placeholderSearch}
        exportparts="input: search-input"
        @igcFocus=${(e) => e.stopPropagation()}
        @igcBlur=${(e) => e.stopPropagation()}
        @igcInput=${this.handleSearchInput}
        @keydown=${this.handleSearchInputKeydown}
        dir=${this.dir}
      >
        <igc-icon
          slot=${this.caseSensitiveIcon && 'suffix'}
          name="case_sensitive"
          collection="internal"
          part=${partNameMap({
            'case-icon': true,
            active: (_a = this.filteringOptions.caseSensitive) !== null && _a !== void 0 ? _a : false,
        })}
          @click=${this.toggleCaseSensitivity}
        ></igc-icon>
      </igc-input>
    </div>`;
    }
    renderEmptyTemplate() {
        return html `<div part="empty" ?hidden=${this.dataState.length > 0}>
      <slot name="empty">The list is empty</slot>
    </div>`;
    }
    renderList() {
        return html `<div
      @keydown=${this.listKeydownHandler}
      part="list-wrapper"
      ${this.toggleController.toggleDirective}
    >
      ${this.renderSearchInput()}
      <div part="header">
        <slot name="header"></slot>
      </div>
      <igc-combo-list
        id="dropdown"
        part="list"
        aria-label="${this.label}"
        .items=${this.dataState}
        .renderItem=${this.itemRenderer}
        ?hidden=${this.dataState.length === 0}
      >
      </igc-combo-list>
      ${this.renderEmptyTemplate()}
      <div part="footer">
        <slot name="footer"></slot>
      </div>
    </div>`;
    }
    renderHelperText() {
        return html `<div
      id="helper-text"
      part="helper-text"
      ?hidden="${this.helperText.length === 0}"
    >
      <slot name="helper-text"></slot>
    </div>`;
    }
    render() {
        return html `
      ${this.renderMainInput()}${this.renderList()}${this.renderHelperText()}
    `;
    }
};
IgcComboComponent.tagName = 'igc-combo';
IgcComboComponent.styles = styles;
__decorate([
    queryAssignedElements({ slot: 'helper-text' })
], IgcComboComponent.prototype, "helperText", void 0);
__decorate([
    queryAssignedElements({ slot: 'suffix' })
], IgcComboComponent.prototype, "inputSuffix", void 0);
__decorate([
    queryAssignedElements({ slot: 'prefix' })
], IgcComboComponent.prototype, "inputPrefix", void 0);
__decorate([
    query('[part="search-input"]')
], IgcComboComponent.prototype, "input", void 0);
__decorate([
    query('igc-input#target')
], IgcComboComponent.prototype, "target", void 0);
__decorate([
    query('igc-combo-list')
], IgcComboComponent.prototype, "list", void 0);
__decorate([
    property({ attribute: false })
], IgcComboComponent.prototype, "data", void 0);
__decorate([
    property()
], IgcComboComponent.prototype, "name", void 0);
__decorate([
    property({ reflect: true, type: Boolean })
], IgcComboComponent.prototype, "disabled", void 0);
__decorate([
    property({ reflect: true, type: Boolean })
], IgcComboComponent.prototype, "required", void 0);
__decorate([
    property({ reflect: true, type: Boolean })
], IgcComboComponent.prototype, "invalid", void 0);
__decorate([
    property({ reflect: true, type: Boolean })
], IgcComboComponent.prototype, "outlined", void 0);
__decorate([
    property({ attribute: 'single-select', reflect: true, type: Boolean })
], IgcComboComponent.prototype, "singleSelect", void 0);
__decorate([
    property({ type: Boolean })
], IgcComboComponent.prototype, "autofocus", void 0);
__decorate([
    property({ attribute: 'autofocus-list', type: Boolean })
], IgcComboComponent.prototype, "autofocusList", void 0);
__decorate([
    property({ type: String })
], IgcComboComponent.prototype, "label", void 0);
__decorate([
    property({ type: String })
], IgcComboComponent.prototype, "placeholder", void 0);
__decorate([
    property({ attribute: 'placeholder-search', type: String })
], IgcComboComponent.prototype, "placeholderSearch", void 0);
__decorate([
    property({ reflect: true })
], IgcComboComponent.prototype, "dir", void 0);
__decorate([
    property({ type: Boolean })
], IgcComboComponent.prototype, "open", void 0);
__decorate([
    property({ type: Boolean })
], IgcComboComponent.prototype, "flip", void 0);
__decorate([
    property({ attribute: 'value-key', reflect: false })
], IgcComboComponent.prototype, "valueKey", void 0);
__decorate([
    property({ attribute: 'display-key', reflect: false })
], IgcComboComponent.prototype, "displayKey", void 0);
__decorate([
    property({ attribute: 'group-key', reflect: false })
], IgcComboComponent.prototype, "groupKey", void 0);
__decorate([
    property({ attribute: 'group-sorting', reflect: false })
], IgcComboComponent.prototype, "groupSorting", void 0);
__decorate([
    property({
        attribute: 'filtering-options',
        reflect: false,
        converter: filteringOptionsConverter,
    })
], IgcComboComponent.prototype, "filteringOptions", void 0);
__decorate([
    property({ type: Boolean, attribute: 'case-sensitive-icon', reflect: false })
], IgcComboComponent.prototype, "caseSensitiveIcon", void 0);
__decorate([
    property({ type: Boolean, attribute: 'disable-filtering', reflect: false })
], IgcComboComponent.prototype, "disableFiltering", void 0);
__decorate([
    property({ attribute: false })
], IgcComboComponent.prototype, "itemTemplate", void 0);
__decorate([
    property({ attribute: false })
], IgcComboComponent.prototype, "groupHeaderTemplate", void 0);
__decorate([
    state()
], IgcComboComponent.prototype, "dataState", void 0);
__decorate([
    watch('data')
], IgcComboComponent.prototype, "dataChanged", null);
__decorate([
    watch('valueKey')
], IgcComboComponent.prototype, "updateDisplayKey", null);
__decorate([
    watch('displayKey')
], IgcComboComponent.prototype, "updateFilterKey", null);
__decorate([
    watch('groupKey'),
    watch('groupSorting'),
    watch('pipeline')
], IgcComboComponent.prototype, "pipeline", null);
__decorate([
    watch('open')
], IgcComboComponent.prototype, "toggleDirectiveChange", null);
__decorate([
    watch('singleSelect', { waitUntilFirstUpdate: true })
], IgcComboComponent.prototype, "resetState", null);
__decorate([
    watch('value')
], IgcComboComponent.prototype, "validate", null);
IgcComboComponent = __decorate([
    themes({ material, bootstrap, fluent, indigo }),
    blazorAdditionalDependencies('IgcIconComponent, IgcInputComponent'),
    blazorIndirectRender
], IgcComboComponent);
export default IgcComboComponent;
//# sourceMappingURL=combo.js.map