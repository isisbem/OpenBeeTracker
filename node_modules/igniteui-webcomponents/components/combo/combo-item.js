var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { html, LitElement, nothing } from 'lit';
import { themes } from '../../theming/theming-decorator.js';
import { styles } from './themes/light/item/combo-item.base.css.js';
import { styles as bootstrap } from '../dropdown/themes/light/dropdown-item.bootstrap.css.js';
import { styles as fluent } from '../dropdown/themes/light/dropdown-item.fluent.css.js';
import { styles as indigo } from '../dropdown/themes/light/dropdown-item.indigo.css.js';
import { property } from 'lit/decorators.js';
import { watch } from '../common/decorators/watch.js';
import IgcCheckboxComopnent from '../checkbox/checkbox.js';
import { defineComponents } from '../common/definitions/defineComponents.js';
defineComponents(IgcCheckboxComopnent);
let IgcComboItemComponent = class IgcComboItemComponent extends LitElement {
    constructor() {
        super(...arguments);
        this.selected = false;
        this.active = false;
        this.hideCheckbox = false;
    }
    selectedChange() {
        this.selected
            ? this.setAttribute('aria-selected', 'true')
            : this.removeAttribute('aria-selected');
    }
    connectedCallback() {
        super.connectedCallback();
        this.setAttribute('role', 'option');
    }
    renderCheckbox() {
        return html `<section part="prefix">
      <igc-checkbox
        aria-hidden="true"
        ?checked=${this.selected}
        tabindex="-1"
        exportparts="control: checkbox, indicator: checkbox-indicator, checked"
      ></igc-checkbox>
    </section>`;
    }
    render() {
        return html `
      ${!this.hideCheckbox ? this.renderCheckbox() : nothing}
      <section id="content" part="content">
        <slot></slot>
      </section>
    `;
    }
};
IgcComboItemComponent.tagName = 'igc-combo-item';
IgcComboItemComponent.styles = styles;
__decorate([
    property({ attribute: false })
], IgcComboItemComponent.prototype, "index", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], IgcComboItemComponent.prototype, "selected", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], IgcComboItemComponent.prototype, "active", void 0);
__decorate([
    property({ attribute: 'hide-checkbox', type: Boolean, reflect: false })
], IgcComboItemComponent.prototype, "hideCheckbox", void 0);
__decorate([
    watch('selected')
], IgcComboItemComponent.prototype, "selectedChange", null);
IgcComboItemComponent = __decorate([
    themes({ bootstrap, fluent, indigo })
], IgcComboItemComponent);
export default IgcComboItemComponent;
//# sourceMappingURL=combo-item.js.map