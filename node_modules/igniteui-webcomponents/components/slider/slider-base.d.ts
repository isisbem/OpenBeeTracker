import { LitElement, TemplateResult } from 'lit';
import { StyleInfo } from 'lit/directives/style-map.js';
export declare class IgcSliderBaseComponent extends LitElement {
    static styles: import("lit").CSSResult;
    protected thumb: HTMLElement;
    private labelElements;
    private _lowerBound?;
    private _upperBound?;
    private _min;
    private _max;
    private _step;
    private startValue?;
    private pointerCaptured;
    private thumbHoverTimer;
    protected activeThumb?: HTMLElement;
    protected thumbLabelsVisible: boolean;
    protected labels?: string[];
    set min(value: number);
    /**
     * The minimum value of the slider scale. Defaults to 0.
     * @attr
     */
    get min(): number;
    set max(value: number);
    /**
     * The maximum value of the slider scale. Defaults to 100.
     * @attr
     */
    get max(): number;
    set lowerBound(value: number | undefined);
    /**
     * The lower bound of the slider value. If not set, the `min` value is applied.
     * @attr lower-bound
     */
    get lowerBound(): number | undefined;
    set upperBound(value: number | undefined);
    /**
     * The upper bound of the slider value. If not set, the `max` value is applied.
     * @attr upper-bound
     */
    get upperBound(): number | undefined;
    /**
     * Disables the UI interactions of the slider.
     * @attr
     */
    disabled: boolean;
    /**
     * Marks the slider track as discrete so it displays the steps.
     * If the `step` is 0, the slider will remain continuos even if `discreteTrack` is `true`.
     * @attr discrete-track
     */
    discreteTrack: boolean;
    /**
     * Hides the thumb tooltip.
     * @attr hide-tooltip
     */
    hideTooltip: boolean;
    set step(value: number);
    /**
     * Specifies the granularity that the value must adhere to.
     * If set to 0 no stepping is implied and any value in the range is allowed.
     * @attr
     */
    get step(): number;
    /**
     * The number of primary ticks. It defaults to 0 which means no primary ticks are displayed.
     * @attr primary-ticks
     */
    primaryTicks: number;
    /**
     * The number of secondary ticks. It defaults to 0 which means no secondary ticks are displayed.
     * @attr secondary-ticks
     */
    secondaryTicks: number;
    /**
     * Changes the orientation of the ticks.
     * @attr tick-orientation
     */
    tickOrientation: 'mirror' | 'start' | 'end';
    /**
     * Hides the primary tick labels.
     * @attr hide-primary-labels
     */
    hidePrimaryLabels: boolean;
    /**
     * Hides the secondary tick labels.
     * @attr hide-secondary-labels
     */
    hideSecondaryLabels: boolean;
    /**
     * The locale used to format the thumb and tick label values in the slider.
     * @attr
     */
    locale: string;
    /**
     * String format used for the thumb and tick label values in the slider.
     * @attr value-format
     */
    valueFormat?: string;
    /**
     * Number format options used for the thumb and tick label values in the slider.
     */
    valueFormatOptions?: Intl.NumberFormatOptions;
    /**
     * The degrees for the rotation of the tick labels. Defaults to 0.
     * @attr tick-label-rotation
     */
    tickLabelRotation: 0 | 90 | -90;
    protected constraintsChange(): void;
    protected labelsChange(): void;
    constructor();
    connectedCallback(): void;
    disconnectedCallback(): void;
    protected handleKeyUp(): void;
    protected handleSlotChange(): void;
    protected get activeValue(): number;
    protected normalizeValue(): void;
    protected getTrackStyle(): StyleInfo;
    protected updateValue(_increment: number): boolean;
    protected renderThumbs(): TemplateResult<1>;
    protected emitInputEvent(): void;
    protected emitChangeEvent(): void;
    protected get actualMin(): number;
    protected get actualMax(): number;
    protected validateValue(value: number): number;
    protected formatValue(value: number): string;
    private normalizeByStep;
    protected closestHandle(_event: PointerEvent): HTMLElement;
    private totalTickCount;
    private tickValue;
    private isPrimary;
    private showThumbLabels;
    private hideThumbLabels;
    private valueInRange;
    protected valueToFraction(value: number): number;
    private calculateTrackUpdate;
    private updateSlider;
    private pointerDown;
    private pointerMove;
    private lostPointerCapture;
    private handleKeydown;
    protected handleThumbPointerEnter: () => void;
    protected handleThumbPointerLeave: () => void;
    protected renderTicks(): TemplateResult<1>[];
    protected renderThumb(value: number, ariaLabel?: string, thumbId?: string): TemplateResult<1>;
    private renderSteps;
    protected render(): TemplateResult<1>;
}
