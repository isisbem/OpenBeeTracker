var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var IgcSwitchComponent_1;
import { html } from 'lit';
import { ifDefined } from 'lit/directives/if-defined.js';
import { live } from 'lit/directives/live.js';
import { themes } from '../../theming/theming-decorator.js';
import { watch } from '../common/decorators/watch.js';
import { createCounter, partNameMap } from '../common/util.js';
import { IgcCheckboxBaseComponent } from './checkbox-base.js';
import { styles } from './themes/light/switch.base.css.js';
import { styles as bootstrap } from './themes/light/switch.bootstrap.css.js';
import { styles as fluent } from './themes/light/switch.fluent.css.js';
import { styles as indigo } from './themes/light/switch.indigo.css.js';
import { styles as material } from './themes/light/switch.material.css.js';
let IgcSwitchComponent = IgcSwitchComponent_1 = class IgcSwitchComponent extends IgcCheckboxBaseComponent {
    constructor() {
        super(...arguments);
        this.inputId = `switch-${IgcSwitchComponent_1.increment()}`;
        this.labelId = `switch-label-${this.inputId}`;
    }
    handleClick() {
        this.checked = !this.checked;
        this.emitEvent('igcChange', { detail: this.checked });
    }
    handleChange() {
        this.invalid = !this.input.checkValidity();
    }
    render() {
        return html `
      <label
        part=${partNameMap({ base: true, checked: this.checked })}
        for=${this.inputId}
        @pointerdown=${this.handleMouseDown}
      >
        <input
          id=${this.inputId}
          type="checkbox"
          name=${ifDefined(this.name)}
          value=${ifDefined(this.value)}
          .required=${this.required}
          .disabled=${this.disabled}
          .checked=${live(this.checked)}
          aria-checked=${this.checked ? 'true' : 'false'}
          aria-disabled=${this.disabled ? 'true' : 'false'}
          aria-labelledby=${this.ariaLabelledby
            ? this.ariaLabelledby
            : this.labelId}
          @click=${this.handleClick}
          @blur=${this.handleBlur}
          @focus=${this.handleFocus}
        />
        <span
          part=${partNameMap({
            control: true,
            checked: this.checked,
            focused: this.focused,
        })}
        >
          <span
            part=${partNameMap({ thumb: true, checked: this.checked })}
          ></span>
        </span>
        <span
          .hidden="${this.hideLabel}"
          part=${partNameMap({ label: true, checked: this.checked })}
          id=${this.labelId}
        >
          <slot></slot>
        </span>
      </label>
    `;
    }
};
IgcSwitchComponent.tagName = 'igc-switch';
IgcSwitchComponent.styles = styles;
IgcSwitchComponent.increment = createCounter();
__decorate([
    watch('checked', { waitUntilFirstUpdate: true })
], IgcSwitchComponent.prototype, "handleChange", null);
IgcSwitchComponent = IgcSwitchComponent_1 = __decorate([
    themes({ material, bootstrap, fluent, indigo })
], IgcSwitchComponent);
export default IgcSwitchComponent;
//# sourceMappingURL=switch.js.map