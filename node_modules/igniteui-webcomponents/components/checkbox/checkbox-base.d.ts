import { LitElement } from 'lit';
import { Constructor } from '../common/mixins/constructor.js';
export interface IgcCheckboxEventMap {
    igcChange: CustomEvent<boolean>;
    igcFocus: CustomEvent<void>;
    igcBlur: CustomEvent<void>;
}
declare const IgcCheckboxBaseComponent_base: import("../common/mixins/constructor.js").AbstractConstructor<import("../common/mixins/event-emitter.js").EventEmitterInterface<IgcCheckboxEventMap>> & Constructor<LitElement>;
export declare class IgcCheckboxBaseComponent extends IgcCheckboxBaseComponent_base {
    protected input: HTMLInputElement;
    protected label: Array<Node>;
    protected focused: boolean;
    protected hideLabel: boolean;
    /**
     * The name attribute of the control.
     * @attr
     */
    name: string;
    /**
     * The value attribute of the control.
     * @attr
     */
    value: string;
    /**
     * Disables the control.
     * @attr
     */
    disabled: boolean;
    /**
     * The checked state of the control.
     * @attr
     */
    checked: boolean;
    /**
     * Makes the control a required field.
     * @attr
     */
    required: boolean;
    /**
     * Controls the validity of the control.
     * @attr
     */
    invalid: boolean;
    /**
     * The label position of the control.
     * @attr label-position
     */
    labelPosition: 'before' | 'after';
    /** Sets the aria-labelledby attribute for the control. */
    ariaLabelledby: string;
    /** Simulates a click on the control. */
    click(): void;
    /** Sets focus on the control. */
    focus(options?: FocusOptions): void;
    /** Removes focus from the control. */
    blur(): void;
    /** Checks for validity of the control and shows the browser message if it invalid. */
    reportValidity(): boolean;
    /** Checks for validity of the control and emits the invalid event if it invalid. */
    checkValidity(): boolean;
    /**
     * Sets a custom validation message for the control.
     * As long as `message` is not empty, the control is considered invalid.
     */
    setCustomValidity(message: string): void;
    protected handleBlur(): void;
    protected handleFocus(): void;
    protected handleMouseDown(event: PointerEvent): void;
    connectedCallback(): void;
    disconnectedCallback(): void;
    protected handleKeyUp(): void;
    protected firstUpdated(): Promise<void>;
}
export {};
