{"version":3,"file":"switch.js","sourceRoot":"","sources":["../../../src/components/checkbox/switch.ts"],"names":[],"mappings":";;;;;;;AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,KAAK,CAAC;AAC3B,OAAO,EAAE,SAAS,EAAE,MAAM,8BAA8B,CAAC;AACzD,OAAO,EAAE,IAAI,EAAE,MAAM,wBAAwB,CAAC;AAC9C,OAAO,EAAE,MAAM,EAAE,MAAM,oCAAoC,CAAC;AAC5D,OAAO,EAAE,KAAK,EAAE,MAAM,+BAA+B,CAAC;AACtD,OAAO,EAAE,aAAa,EAAE,WAAW,EAAE,MAAM,mBAAmB,CAAC;AAC/D,OAAO,EAAE,wBAAwB,EAAE,MAAM,oBAAoB,CAAC;AAC9D,OAAO,EAAE,MAAM,EAAE,MAAM,mCAAmC,CAAC;AAC3D,OAAO,EAAE,MAAM,IAAI,SAAS,EAAE,MAAM,wCAAwC,CAAC;AAC7E,OAAO,EAAE,MAAM,IAAI,MAAM,EAAE,MAAM,qCAAqC,CAAC;AACvE,OAAO,EAAE,MAAM,IAAI,MAAM,EAAE,MAAM,qCAAqC,CAAC;AACvE,OAAO,EAAE,MAAM,IAAI,QAAQ,EAAE,MAAM,uCAAuC,CAAC;AAmB5D,IAAM,kBAAkB,0BAAxB,MAAM,kBAAmB,SAAQ,wBAAwB;IAAzD;;QAKL,YAAO,GAAG,UAAU,oBAAkB,CAAC,SAAS,EAAE,EAAE,CAAC;QACrD,YAAO,GAAG,gBAAgB,IAAI,CAAC,OAAO,EAAE,CAAC;IAyDnD,CAAC;IAvDS,WAAW;QACjB,IAAI,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC;QAC7B,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;IACxD,CAAC;IAGS,YAAY;QACpB,IAAI,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC;IAC7C,CAAC;IAEkB,MAAM;QACvB,OAAO,IAAI,CAAA;;eAEA,WAAW,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC;cACnD,IAAI,CAAC,OAAO;uBACH,IAAI,CAAC,eAAe;;;eAG5B,IAAI,CAAC,OAAO;;iBAEV,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC;kBACnB,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC;sBACjB,IAAI,CAAC,QAAQ;sBACb,IAAI,CAAC,QAAQ;qBACd,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;yBACd,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO;0BAC9B,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO;4BAC9B,IAAI,CAAC,cAAc;YACnC,CAAC,CAAC,IAAI,CAAC,cAAc;YACrB,CAAC,CAAC,IAAI,CAAC,OAAO;mBACP,IAAI,CAAC,WAAW;kBACjB,IAAI,CAAC,UAAU;mBACd,IAAI,CAAC,WAAW;;;iBAGlB,WAAW,CAAC;YACjB,OAAO,EAAE,IAAI;YACb,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,OAAO,EAAE,IAAI,CAAC,OAAO;SACtB,CAAC;;;mBAGO,WAAW,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC;;;;qBAIjD,IAAI,CAAC,SAAS;iBAClB,WAAW,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC;eACrD,IAAI,CAAC,OAAO;;;;;KAKtB,CAAC;IACJ,CAAC;;AA7DsB,0BAAO,GAAG,YAAY,CAAC;AAChC,yBAAM,GAAG,MAAM,CAAC;AACN,4BAAS,GAAG,aAAa,EAAE,CAAC;AAWpD;IADC,KAAK,CAAC,SAAS,EAAE,EAAE,oBAAoB,EAAE,IAAI,EAAE,CAAC;sDAGhD;AAhBkB,kBAAkB;IADtC,MAAM,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC;GAC3B,kBAAkB,CA+DtC;eA/DoB,kBAAkB","sourcesContent":["import { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { live } from 'lit/directives/live.js';\nimport { themes } from '../../theming/theming-decorator.js';\nimport { watch } from '../common/decorators/watch.js';\nimport { createCounter, partNameMap } from '../common/util.js';\nimport { IgcCheckboxBaseComponent } from './checkbox-base.js';\nimport { styles } from './themes/light/switch.base.css.js';\nimport { styles as bootstrap } from './themes/light/switch.bootstrap.css.js';\nimport { styles as fluent } from './themes/light/switch.fluent.css.js';\nimport { styles as indigo } from './themes/light/switch.indigo.css.js';\nimport { styles as material } from './themes/light/switch.material.css.js';\n\n/**\n * Similar to a checkbox, a switch controls the state of a single setting on or off.\n *\n * @element igc-switch\n *\n * @slot - The switch label.\n *\n * @fires igcChange - Emitted when the control's checked state changes.\n * @fires igcFocus - Emitted when the control gains focus.\n * @fires igcBlur - Emitted when the control loses focus.\n *\n * @csspart base - The base wrapper of the switch.\n * @csspart control - The switch control.\n * @csspart thumb - The position indicator of the switch.\n * @csspart label - The switch label.\n */\n@themes({ material, bootstrap, fluent, indigo })\nexport default class IgcSwitchComponent extends IgcCheckboxBaseComponent {\n  public static readonly tagName = 'igc-switch';\n  public static styles = styles;\n  private static readonly increment = createCounter();\n\n  private inputId = `switch-${IgcSwitchComponent.increment()}`;\n  private labelId = `switch-label-${this.inputId}`;\n\n  private handleClick() {\n    this.checked = !this.checked;\n    this.emitEvent('igcChange', { detail: this.checked });\n  }\n\n  @watch('checked', { waitUntilFirstUpdate: true })\n  protected handleChange() {\n    this.invalid = !this.input.checkValidity();\n  }\n\n  protected override render() {\n    return html`\n      <label\n        part=${partNameMap({ base: true, checked: this.checked })}\n        for=${this.inputId}\n        @pointerdown=${this.handleMouseDown}\n      >\n        <input\n          id=${this.inputId}\n          type=\"checkbox\"\n          name=${ifDefined(this.name)}\n          value=${ifDefined(this.value)}\n          .required=${this.required}\n          .disabled=${this.disabled}\n          .checked=${live(this.checked)}\n          aria-checked=${this.checked ? 'true' : 'false'}\n          aria-disabled=${this.disabled ? 'true' : 'false'}\n          aria-labelledby=${this.ariaLabelledby\n            ? this.ariaLabelledby\n            : this.labelId}\n          @click=${this.handleClick}\n          @blur=${this.handleBlur}\n          @focus=${this.handleFocus}\n        />\n        <span\n          part=${partNameMap({\n            control: true,\n            checked: this.checked,\n            focused: this.focused,\n          })}\n        >\n          <span\n            part=${partNameMap({ thumb: true, checked: this.checked })}\n          ></span>\n        </span>\n        <span\n          .hidden=\"${this.hideLabel}\"\n          part=${partNameMap({ label: true, checked: this.checked })}\n          id=${this.labelId}\n        >\n          <slot></slot>\n        </span>\n      </label>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'igc-switch': IgcSwitchComponent;\n  }\n}\n"]}