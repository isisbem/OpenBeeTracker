var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { html, LitElement } from 'lit';
import { property, queryAssignedElements, queryAssignedNodes, state, } from 'lit/decorators.js';
import { themes } from '../../theming/theming-decorator.js';
import { partNameMap } from '../common/util.js';
import { styles as fluent } from './themes/light/fluent/nav-drawer-item.fluent.css.js';
import { styles as indigo } from './themes/light/indigo/nav-drawer-item.indigo.css.js';
import { styles } from './themes/light/nav-drawer-item.base.css.js';
let IgcNavDrawerItemComponent = class IgcNavDrawerItemComponent extends LitElement {
    constructor() {
        super(...arguments);
        this.disabled = false;
        this.active = false;
    }
    connectedCallback() {
        var _a;
        super.connectedCallback();
        (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.addEventListener('slotchange', (_) => {
            this._textLength = this._text.length;
        });
    }
    resolvePartNames(base) {
        return {
            [base]: true,
            mini: this._textLength < 1,
        };
    }
    render() {
        return html `
      <div part="${partNameMap(this.resolvePartNames('base'))}">
        <span part="icon" .hidden="${this.navdrawerIcon.length == 0}">
          <slot name="icon"></slot>
        </span>
        <span part="content">
          <slot name="content"></slot>
        </span>
      </div>
    `;
    }
};
IgcNavDrawerItemComponent.tagName = 'igc-nav-drawer-item';
IgcNavDrawerItemComponent.styles = styles;
__decorate([
    property({ type: Boolean, reflect: true })
], IgcNavDrawerItemComponent.prototype, "disabled", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], IgcNavDrawerItemComponent.prototype, "active", void 0);
__decorate([
    state()
], IgcNavDrawerItemComponent.prototype, "_textLength", void 0);
__decorate([
    queryAssignedElements({ slot: 'content' })
], IgcNavDrawerItemComponent.prototype, "_text", void 0);
__decorate([
    queryAssignedNodes({ slot: 'icon', flatten: true })
], IgcNavDrawerItemComponent.prototype, "navdrawerIcon", void 0);
IgcNavDrawerItemComponent = __decorate([
    themes({ fluent, indigo })
], IgcNavDrawerItemComponent);
export default IgcNavDrawerItemComponent;
//# sourceMappingURL=nav-drawer-item.js.map