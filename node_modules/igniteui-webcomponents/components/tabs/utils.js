export const observerConfig = {
    attributes: true,
    attributeFilter: ['selected'],
    childList: true,
    subtree: true,
};
function isMatchingTag(node, ...tags) {
    return tags ? tags.includes(node.nodeName.toLowerCase()) : true;
}
export function getAttributesForTags(records, ...tags) {
    return records
        .filter(({ type, target }) => type === 'attributes' && isMatchingTag(target, ...tags))
        .map(({ target }) => target);
}
export function getNodesForTags(records, root, ...tags) {
    const collected = { addedNodes: [], removedNodes: [] };
    records
        .filter(({ type, target }) => type === 'childList' && (root ? target.isSameNode(root) : true))
        .reduce((prev, curr) => {
        prev.addedNodes = prev.addedNodes.concat(Array.from(curr.addedNodes)
            .filter((node) => isMatchingTag(node, ...tags))
            .map((node) => node));
        prev.removedNodes = prev.removedNodes.concat(Array.from(curr.removedNodes)
            .filter((node) => isMatchingTag(node, ...tags))
            .map((node) => node));
        return prev;
    }, collected);
    return collected.addedNodes.length || collected.removedNodes.length
        ? collected
        : null;
}
//# sourceMappingURL=utils.js.map