import { IgcInputBaseComponent } from './input-base.js';
/**
 * @element igc-input
 *
 * @slot prefix - Renders content before the input.
 * @slot suffix - Renders content after input.
 * @slot helper-text - Renders content below the input.
 *
 * @fires igcInput - Emitted when the control input receives user input.
 * @fires igcChange - Emitted when the control's checked state changes.
 * @fires igcFocus - Emitted when the control gains focus.
 * @fires igcBlur - Emitted when the control loses focus.
 *
 * @csspart container - The main wrapper that holds all main input elements.
 * @csspart input - The native input element.
 * @csspart label - The native label element.
 * @csspart prefix - The prefix wrapper.
 * @csspart suffix - The suffix wrapper.
 * @csspart helper-text - The helper text wrapper.
 */
export default class IgcInputComponent extends IgcInputBaseComponent {
    static readonly tagName = "igc-input";
    /**
     * The value of the control.
     * @attr
     */
    value: string;
    /**
     * The type attribute of the control.
     * @attr
     */
    type: 'email' | 'number' | 'password' | 'search' | 'tel' | 'text' | 'url';
    /**
     * The input mode attribute of the control.
     * @attr
     */
    inputmode: 'none' | 'txt' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url';
    /**
     * The pattern attribute of the control.
     * @attr
     */
    pattern: string;
    /**
     * Controls the validity of the control.
     * @attr
     */
    invalid: boolean;
    /**
     * The minlength attribute of the control.
     * @attr
     */
    minlength: number;
    /**
     * The maxlength attribute of the control.
     * @attr
     */
    maxlength: number;
    /**
     * The min attribute of the control.
     * @attr
     */
    min: number | string;
    /**
     * The max attribute of the control.
     * @attr
     */
    max: number | string;
    /**
     * The step attribute of the control.
     * @attr
     */
    step: number;
    /**
     * The autofocus attribute of the control.
     * @attr
     */
    autofocus: boolean;
    /**
     * The autocomplete attribute of the control.
     * @attr
     */
    autocomplete: string;
    tabIndex: number;
    /** Checks for validity of the control and shows the browser message if it's invalid. */
    reportValidity(): boolean;
    /** Checks for validity of the control and emits the invalid event if it invalid. */
    checkValidity(): boolean;
    /** Replaces the selected text in the input. */
    setRangeText(replacement: string, start: number, end: number, selectMode?: 'select' | 'start' | 'end' | 'preserve'): void;
    /**
     * Sets a custom validation message for the control.
     * As long as `message` is not empty, the control is considered invalid.
     */
    setCustomValidity(message: string): void;
    /** Selects all text within the input. */
    select(): void;
    /** Increments the numeric value of the input by one or more steps. */
    stepUp(n?: number): void;
    /** Decrements the numeric value of the input by one or more steps. */
    stepDown(n?: number): void;
    private handleInvalid;
    private handleInput;
    private handleChange;
    protected handleValueChange(): void;
    protected renderInput(): import("lit-html").TemplateResult<1>;
}
declare global {
    interface HTMLElementTagNameMap {
        'igc-input': IgcInputComponent;
    }
}
