{"version":3,"file":"input.js","sourceRoot":"","sources":["../../../src/components/input/input.ts"],"names":[],"mappings":"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","sourcesContent":["import { html } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { live } from 'lit/directives/live.js';\nimport { alternateName } from '../common/decorators/alternateName.js';\nimport { blazorSuppress } from '../common/decorators/blazorSuppress.js';\nimport { blazorTwoWayBind } from '../common/decorators/blazorTwoWayBind.js';\nimport { watch } from '../common/decorators/watch.js';\nimport { partNameMap } from '../common/util.js';\nimport { IgcInputBaseComponent } from './input-base.js';\n\n/**\n * @element igc-input\n *\n * @slot prefix - Renders content before the input.\n * @slot suffix - Renders content after input.\n * @slot helper-text - Renders content below the input.\n *\n * @fires igcInput - Emitted when the control input receives user input.\n * @fires igcChange - Emitted when the control's checked state changes.\n * @fires igcFocus - Emitted when the control gains focus.\n * @fires igcBlur - Emitted when the control loses focus.\n *\n * @csspart container - The main wrapper that holds all main input elements.\n * @csspart input - The native input element.\n * @csspart label - The native label element.\n * @csspart prefix - The prefix wrapper.\n * @csspart suffix - The suffix wrapper.\n * @csspart helper-text - The helper text wrapper.\n */\nexport default class IgcInputComponent extends IgcInputBaseComponent {\n  public static readonly tagName = 'igc-input';\n\n  /**\n   * The value of the control.\n   * @attr\n   */\n  @property()\n  @blazorTwoWayBind('igcChange', 'detail')\n  public value = '';\n\n  /**\n   * The type attribute of the control.\n   * @attr\n   */\n  @alternateName('displayType')\n  @property({ reflect: true })\n  public type:\n    | 'email'\n    | 'number'\n    | 'password'\n    | 'search'\n    | 'tel'\n    | 'text'\n    | 'url' = 'text';\n\n  /**\n   * The input mode attribute of the control.\n   * @attr\n   */\n  @property()\n  public inputmode!:\n    | 'none'\n    | 'txt'\n    | 'decimal'\n    | 'numeric'\n    | 'tel'\n    | 'search'\n    | 'email'\n    | 'url';\n\n  /**\n   * The pattern attribute of the control.\n   * @attr\n   */\n  @property({ type: String })\n  public pattern!: string;\n\n  /**\n   * Controls the validity of the control.\n   * @attr\n   */\n  @property({ reflect: true, type: Boolean })\n  public invalid = false;\n\n  /**\n   * The minlength attribute of the control.\n   * @attr\n   */\n  @property({ type: Number })\n  public minlength!: number;\n\n  /**\n   * The maxlength attribute of the control.\n   * @attr\n   */\n  @property({ type: Number })\n  public maxlength!: number;\n\n  /**\n   * The min attribute of the control.\n   * @attr\n   */\n  @property()\n  public min!: number | string;\n\n  /**\n   * The max attribute of the control.\n   * @attr\n   */\n  @property()\n  public max!: number | string;\n\n  /**\n   * The step attribute of the control.\n   * @attr\n   */\n  @property({ type: Number })\n  public step!: number;\n\n  /**\n   * The autofocus attribute of the control.\n   * @attr\n   */\n  @property({ type: Boolean })\n  public override autofocus!: boolean;\n\n  /**\n   * The autocomplete attribute of the control.\n   * @attr\n   */\n  @property()\n  public autocomplete!: string;\n\n  @property({ type: Number })\n  public override tabIndex = 0;\n\n  /** Checks for validity of the control and shows the browser message if it's invalid. */\n  public reportValidity() {\n    return this.input.reportValidity();\n  }\n\n  /** Checks for validity of the control and emits the invalid event if it invalid. */\n  public checkValidity() {\n    return this.input.checkValidity();\n  }\n\n  /** Replaces the selected text in the input. */\n  @blazorSuppress()\n  public override setRangeText(\n    replacement: string,\n    start: number,\n    end: number,\n    selectMode: 'select' | 'start' | 'end' | 'preserve' = 'preserve'\n  ) {\n    super.setRangeText(replacement, start, end, selectMode);\n    this.value = this.input.value;\n  }\n\n  /**\n   * Sets a custom validation message for the control.\n   * As long as `message` is not empty, the control is considered invalid.\n   */\n  public setCustomValidity(message: string) {\n    this.input.setCustomValidity(message);\n    this.invalid = !this.input.checkValidity();\n  }\n\n  /** Selects all text within the input. */\n  public select() {\n    return this.input.select();\n  }\n\n  /** Increments the numeric value of the input by one or more steps. */\n  public stepUp(n?: number) {\n    this.input.stepUp(n);\n    this.handleChange();\n  }\n\n  /** Decrements the numeric value of the input by one or more steps. */\n  public stepDown(n?: number) {\n    this.input.stepDown(n);\n    this.handleChange();\n  }\n\n  private handleInvalid() {\n    this.invalid = true;\n  }\n\n  private handleInput() {\n    this.value = this.input.value;\n    this.emitEvent('igcInput', { detail: this.value });\n  }\n\n  private handleChange() {\n    this.value = this.input.value;\n    this.emitEvent('igcChange', { detail: this.value });\n  }\n\n  @watch('value', { waitUntilFirstUpdate: true })\n  protected handleValueChange() {\n    this.updateComplete.then(\n      () => (this.invalid = !this.input.checkValidity())\n    );\n  }\n\n  protected renderInput() {\n    return html`\n      <input\n        id=\"${this.inputId}\"\n        part=\"${partNameMap(this.resolvePartNames('input'))}\"\n        name=\"${ifDefined(this.name)}\"\n        type=\"${ifDefined(this.type)}\"\n        pattern=\"${ifDefined(this.pattern)}\"\n        placeholder=\"${ifDefined(this.placeholder)}\"\n        .value=\"${live(this.value)}\"\n        ?readonly=\"${this.readonly}\"\n        ?disabled=\"${this.disabled}\"\n        ?required=\"${this.required}\"\n        ?autofocus=\"${this.autofocus}\"\n        tabindex=${this.tabIndex}\n        autocomplete=\"${ifDefined(this.autocomplete as any)}\"\n        inputmode=\"${ifDefined(this.inputmode)}\"\n        min=\"${ifDefined(this.min)}\"\n        max=\"${ifDefined(this.max)}\"\n        minlength=\"${ifDefined(this.minlength)}\"\n        maxlength=\"${ifDefined(this.maxlength)}\"\n        step=\"${ifDefined(this.step)}\"\n        aria-invalid=\"${this.invalid ? 'true' : 'false'}\"\n        @invalid=\"${this.handleInvalid}\"\n        @change=\"${this.handleChange}\"\n        @input=\"${this.handleInput}\"\n        @focus=\"${this.handleFocus}\"\n        @blur=\"${this.handleBlur}\"\n      />\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'igc-input': IgcInputComponent;\n  }\n}\n"]}