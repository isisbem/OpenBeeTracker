var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { html } from 'lit';
import { property } from 'lit/decorators.js';
import { ifDefined } from 'lit/directives/if-defined.js';
import { live } from 'lit/directives/live.js';
import { alternateName } from '../common/decorators/alternateName.js';
import { blazorSuppress } from '../common/decorators/blazorSuppress.js';
import { blazorTwoWayBind } from '../common/decorators/blazorTwoWayBind.js';
import { watch } from '../common/decorators/watch.js';
import { partNameMap } from '../common/util.js';
import { IgcInputBaseComponent } from './input-base.js';
export default class IgcInputComponent extends IgcInputBaseComponent {
    constructor() {
        super(...arguments);
        this.value = '';
        this.type = 'text';
        this.invalid = false;
        this.tabIndex = 0;
    }
    reportValidity() {
        return this.input.reportValidity();
    }
    checkValidity() {
        return this.input.checkValidity();
    }
    setRangeText(replacement, start, end, selectMode = 'preserve') {
        super.setRangeText(replacement, start, end, selectMode);
        this.value = this.input.value;
    }
    setCustomValidity(message) {
        this.input.setCustomValidity(message);
        this.invalid = !this.input.checkValidity();
    }
    select() {
        return this.input.select();
    }
    stepUp(n) {
        this.input.stepUp(n);
        this.handleChange();
    }
    stepDown(n) {
        this.input.stepDown(n);
        this.handleChange();
    }
    handleInvalid() {
        this.invalid = true;
    }
    handleInput() {
        this.value = this.input.value;
        this.emitEvent('igcInput', { detail: this.value });
    }
    handleChange() {
        this.value = this.input.value;
        this.emitEvent('igcChange', { detail: this.value });
    }
    handleValueChange() {
        this.updateComplete.then(() => (this.invalid = !this.input.checkValidity()));
    }
    renderInput() {
        return html `
      <input
        id="${this.inputId}"
        part="${partNameMap(this.resolvePartNames('input'))}"
        name="${ifDefined(this.name)}"
        type="${ifDefined(this.type)}"
        pattern="${ifDefined(this.pattern)}"
        placeholder="${ifDefined(this.placeholder)}"
        .value="${live(this.value)}"
        ?readonly="${this.readonly}"
        ?disabled="${this.disabled}"
        ?required="${this.required}"
        ?autofocus="${this.autofocus}"
        tabindex=${this.tabIndex}
        autocomplete="${ifDefined(this.autocomplete)}"
        inputmode="${ifDefined(this.inputmode)}"
        min="${ifDefined(this.min)}"
        max="${ifDefined(this.max)}"
        minlength="${ifDefined(this.minlength)}"
        maxlength="${ifDefined(this.maxlength)}"
        step="${ifDefined(this.step)}"
        aria-invalid="${this.invalid ? 'true' : 'false'}"
        @invalid="${this.handleInvalid}"
        @change="${this.handleChange}"
        @input="${this.handleInput}"
        @focus="${this.handleFocus}"
        @blur="${this.handleBlur}"
      />
    `;
    }
}
IgcInputComponent.tagName = 'igc-input';
__decorate([
    property(),
    blazorTwoWayBind('igcChange', 'detail')
], IgcInputComponent.prototype, "value", void 0);
__decorate([
    alternateName('displayType'),
    property({ reflect: true })
], IgcInputComponent.prototype, "type", void 0);
__decorate([
    property()
], IgcInputComponent.prototype, "inputmode", void 0);
__decorate([
    property({ type: String })
], IgcInputComponent.prototype, "pattern", void 0);
__decorate([
    property({ reflect: true, type: Boolean })
], IgcInputComponent.prototype, "invalid", void 0);
__decorate([
    property({ type: Number })
], IgcInputComponent.prototype, "minlength", void 0);
__decorate([
    property({ type: Number })
], IgcInputComponent.prototype, "maxlength", void 0);
__decorate([
    property()
], IgcInputComponent.prototype, "min", void 0);
__decorate([
    property()
], IgcInputComponent.prototype, "max", void 0);
__decorate([
    property({ type: Number })
], IgcInputComponent.prototype, "step", void 0);
__decorate([
    property({ type: Boolean })
], IgcInputComponent.prototype, "autofocus", void 0);
__decorate([
    property()
], IgcInputComponent.prototype, "autocomplete", void 0);
__decorate([
    property({ type: Number })
], IgcInputComponent.prototype, "tabIndex", void 0);
__decorate([
    blazorSuppress()
], IgcInputComponent.prototype, "setRangeText", null);
__decorate([
    watch('value', { waitUntilFirstUpdate: true })
], IgcInputComponent.prototype, "handleValueChange", null);
//# sourceMappingURL=input.js.map