import { IgcInputBaseComponent } from '../input/input-base.js';
import { MaskParser } from './mask-parser.js';
export type MaskRange = {
    start: number;
    end: number;
};
export declare abstract class IgcMaskInputBaseComponent extends IgcInputBaseComponent {
    protected parser: MaskParser;
    protected selection: MaskRange;
    protected compositionStart: number;
    protected hasFocus: boolean;
    protected maskedValue: string;
    protected _mask: string;
    /** The prompt symbol to use for unfilled parts of the mask. */
    prompt: string;
    /** Controls the validity of the control. */
    invalid: boolean;
    protected get inputSelection(): MaskRange;
    protected get emptyMask(): string;
    connectedCallback(): void;
    /**
     * Sets a custom validation message for the control.
     * As long as `message` is not empty, the control is considered invalid.
     */
    setCustomValidity(message: string): void;
    /** Selects all text within the input. */
    select(): void;
    protected handleInput({ inputType, isComposing }: InputEvent): void | Promise<void>;
    protected handleKeydown({ key }: KeyboardEvent): void;
    protected handleCut(): void;
    protected handleDragStart(): void;
    protected handleCompositionStart(): void;
    protected handleCompositionEnd({ data }: CompositionEvent): void;
    protected handleInvalid(): void;
    setSelectionRange(start: number, end: number, direction?: 'backward' | 'forward' | 'none'): void;
    protected abstract updateInput(string: string, range: MaskRange): void;
}
