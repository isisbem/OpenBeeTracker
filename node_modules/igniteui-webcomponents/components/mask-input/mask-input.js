var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { html } from 'lit';
import { property } from 'lit/decorators.js';
import { ifDefined } from 'lit/directives/if-defined.js';
import { live } from 'lit/directives/live.js';
import { watch } from '../common/decorators/watch.js';
import { blazorTwoWayBind } from '../common/decorators/blazorTwoWayBind.js';
import { partNameMap } from '../common/util.js';
import { IgcMaskInputBaseComponent } from './mask-input-base.js';
export default class IgcMaskInputComponent extends IgcMaskInputBaseComponent {
    constructor() {
        super(...arguments);
        this._value = '';
        this.valueMode = 'raw';
    }
    get value() {
        return this._value
            ? this.valueMode !== 'raw'
                ? this.maskedValue
                : this._value
            : this._value;
    }
    set value(string) {
        this._value = string !== null && string !== void 0 ? string : '';
        this.maskedValue = this.parser.apply(this._value);
    }
    get mask() {
        return this._mask;
    }
    set mask(value) {
        this._mask = value;
        this.parser.mask = value;
        if (this.value) {
            this.maskedValue = this.parser.apply(this._value);
        }
    }
    promptChange() {
        this.parser.prompt = this.prompt;
        if (this.value) {
            this.maskedValue = this.parser.apply(this._value);
        }
    }
    async handleInvalidState() {
        await this.updateComplete;
        this.invalid = !this.checkValidity();
    }
    async updateInput(string, range) {
        const { value, end } = this.parser.replace(this.maskedValue, string, range.start, range.end);
        this.maskedValue = value;
        this._value = this.parser.parse(value);
        this.requestUpdate();
        if (range.start !== this.mask.length) {
            this.emitEvent('igcInput', { detail: this.value });
        }
        await this.updateComplete;
        this.input.setSelectionRange(end, end);
        this.invalid = !this.checkValidity();
    }
    handleDragEnter() {
        if (!this.hasFocus && !this._value) {
            this.maskedValue = this.parser.apply();
        }
    }
    handleDragLeave() {
        if (!this.hasFocus) {
            this.updateMaskedValue();
        }
    }
    async handleFocus() {
        this.hasFocus = true;
        super.handleFocus();
        if (this.readonly) {
            return;
        }
        if (!this._value) {
            this.maskedValue = this.parser.apply();
            await this.updateComplete;
            this.select();
        }
    }
    handleBlur() {
        this.hasFocus = false;
        this.updateMaskedValue();
        super.handleBlur();
    }
    handleChange() {
        this.emitEvent('igcChange', { detail: this.value });
        this.invalid = !this.checkValidity();
    }
    handleClick() {
        if (this.input.selectionStart === this.input.selectionEnd &&
            this.input.selectionStart === this.maskedValue.length) {
            this.select();
        }
    }
    updateMaskedValue() {
        if (this.maskedValue === this.parser.apply()) {
            this.maskedValue = '';
        }
    }
    setRangeText(replacement, start, end, _selectMode = 'preserve') {
        this.input.value = this.parser.replace(this.input.value, replacement, start, end).value;
        this.maskedValue = this.parser.apply(this.parser.parse(this.input.value));
        this._value = this.parser.parse(this.maskedValue);
    }
    reportValidity() {
        const state = this._value
            ? this.parser.isValidString(this.input.value)
            : this.input.reportValidity();
        this.invalid = !state;
        return state;
    }
    checkValidity() {
        if (this.disabled) {
            return this.input.checkValidity();
        }
        if (!this._value) {
            return !this.required;
        }
        return (this.input.checkValidity() && this.parser.isValidString(this.input.value));
    }
    renderInput() {
        var _a;
        return html `
      <input
        type="text"
        part=${partNameMap(this.resolvePartNames('input'))}
        name=${ifDefined(this.name)}
        .value=${live(this.maskedValue)}
        .placeholder=${live((_a = this.placeholder) !== null && _a !== void 0 ? _a : this.parser.escapedMask)}
        ?readonly=${this.readonly}
        ?disabled=${this.disabled}
        ?required=${this.required}
        @dragenter=${this.handleDragEnter}
        @dragleave=${this.handleDragLeave}
        @dragstart=${this.handleDragStart}
        @blur=${this.handleBlur}
        @focus=${this.handleFocus}
        @cut=${this.handleCut}
        @change=${this.handleChange}
        @click=${this.handleClick}
        @compositionstart=${this.handleCompositionStart}
        @compositionend=${this.handleCompositionEnd}
        @input=${this.handleInput}
        aria-invalid="${this.invalid ? 'true' : 'false'}"
        @invalid="${this.handleInvalid}"
        @keydown=${this.handleKeydown}
      />
    `;
    }
}
IgcMaskInputComponent.tagName = 'igc-mask-input';
__decorate([
    property({ attribute: 'value-mode' })
], IgcMaskInputComponent.prototype, "valueMode", void 0);
__decorate([
    property(),
    blazorTwoWayBind('igcChange', 'detail')
], IgcMaskInputComponent.prototype, "value", null);
__decorate([
    property()
], IgcMaskInputComponent.prototype, "mask", null);
__decorate([
    watch('prompt')
], IgcMaskInputComponent.prototype, "promptChange", null);
__decorate([
    watch('required', { waitUntilFirstUpdate: true }),
    watch('disabled', { waitUntilFirstUpdate: true }),
    watch('value', { waitUntilFirstUpdate: true })
], IgcMaskInputComponent.prototype, "handleInvalidState", null);
//# sourceMappingURL=mask-input.js.map