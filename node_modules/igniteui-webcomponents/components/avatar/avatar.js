var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { html, LitElement } from 'lit';
import { property, state } from 'lit/decorators.js';
import { classMap } from 'lit/directives/class-map.js';
import { ifDefined } from 'lit/directives/if-defined.js';
import { themes } from '../../theming/theming-decorator.js';
import { watch } from '../common/decorators/watch.js';
import { SizableMixin } from '../common/mixins/sizable.js';
import { styles } from './themes/avatar.base.css.js';
import { styles as bootstrap } from './themes/avatar.bootstrap.css.js';
let IgcAvatarComponent = class IgcAvatarComponent extends SizableMixin(LitElement) {
    get classes() {
        const { size, shape } = this;
        return {
            circle: shape === 'circle',
            rounded: shape === 'rounded',
            square: shape === 'square',
            small: size === 'small',
            medium: size === 'medium',
            large: size === 'large',
        };
    }
    constructor() {
        super();
        this.hasError = false;
        this.shape = 'square';
        this.size = 'small';
    }
    handleErrorState() {
        this.hasError = false;
    }
    render() {
        return html `
      <div
        part="base"
        role="img"
        aria-label="avatar"
        aria-roledescription=${this.size + ' ' + this.shape}
        class=${classMap(this.classes)}
      >
        ${this.initials
            ? html `<span part="initials">${this.initials}</span>`
            : html ` <slot></slot> `}
        ${this.src && !this.hasError
            ? html `
              <img
                part="image"
                alt=${ifDefined(this.alt)}
                src=${ifDefined(this.src)}
                @error="${() => (this.hasError = true)}"
              />
            `
            : ''}
      </div>
    `;
    }
};
IgcAvatarComponent.tagName = 'igc-avatar';
IgcAvatarComponent.styles = styles;
__decorate([
    property()
], IgcAvatarComponent.prototype, "src", void 0);
__decorate([
    state()
], IgcAvatarComponent.prototype, "hasError", void 0);
__decorate([
    property()
], IgcAvatarComponent.prototype, "alt", void 0);
__decorate([
    property()
], IgcAvatarComponent.prototype, "initials", void 0);
__decorate([
    property({ reflect: true })
], IgcAvatarComponent.prototype, "shape", void 0);
__decorate([
    watch('src')
], IgcAvatarComponent.prototype, "handleErrorState", null);
IgcAvatarComponent = __decorate([
    themes({ bootstrap })
], IgcAvatarComponent);
export default IgcAvatarComponent;
//# sourceMappingURL=avatar.js.map