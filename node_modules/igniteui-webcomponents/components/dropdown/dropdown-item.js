var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { html, LitElement } from 'lit';
import { property } from 'lit/decorators.js';
import { themes } from '../../theming/theming-decorator.js';
import { watch } from '../common/decorators/watch.js';
import { styles } from './themes/light/dropdown-item.base.css.js';
import { styles as bootstrap } from './themes/light/dropdown-item.bootstrap.css.js';
import { styles as fluent } from './themes/light/dropdown-item.fluent.css.js';
import { styles as indigo } from './themes/light/dropdown-item.indigo.css.js';
let IgcDropdownItemComponent = class IgcDropdownItemComponent extends LitElement {
    constructor() {
        super(...arguments);
        this.selected = false;
        this.active = false;
        this.disabled = false;
    }
    get value() {
        var _a;
        return this._value ? this._value : (_a = this.textContent) !== null && _a !== void 0 ? _a : '';
    }
    set value(value) {
        const oldVal = this._value;
        this._value = value;
        this.requestUpdate('value', oldVal);
    }
    selectedChange() {
        this.selected
            ? this.setAttribute('aria-selected', 'true')
            : this.removeAttribute('aria-selected');
        this.active = this.selected;
    }
    disabledChange() {
        this.disabled
            ? this.setAttribute('aria-disabled', 'true')
            : this.removeAttribute('aria-disabled');
    }
    connectedCallback() {
        super.connectedCallback();
        this.setAttribute('role', 'option');
    }
    render() {
        return html `
      <section part="prefix"><slot name="prefix"></slot></section>
      <section part="content"><slot></slot></section>
      <section part="suffix"><slot name="suffix"></slot></section>
    `;
    }
};
IgcDropdownItemComponent.tagName = 'igc-dropdown-item';
IgcDropdownItemComponent.styles = styles;
__decorate([
    property()
], IgcDropdownItemComponent.prototype, "value", null);
__decorate([
    property({ type: Boolean, reflect: true })
], IgcDropdownItemComponent.prototype, "selected", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], IgcDropdownItemComponent.prototype, "active", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], IgcDropdownItemComponent.prototype, "disabled", void 0);
__decorate([
    watch('selected')
], IgcDropdownItemComponent.prototype, "selectedChange", null);
__decorate([
    watch('disabled')
], IgcDropdownItemComponent.prototype, "disabledChange", null);
IgcDropdownItemComponent = __decorate([
    themes({ bootstrap, fluent, indigo })
], IgcDropdownItemComponent);
export default IgcDropdownItemComponent;
//# sourceMappingURL=dropdown-item.js.map