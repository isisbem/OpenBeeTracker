import { LitElement } from 'lit';
import { Constructor } from '../common/mixins/constructor.js';
import { IgcToggleController } from '../toggle/toggle.controller.js';
import type { IgcPlacement, IgcToggleComponent, IgcToggleEventMap } from '../toggle/types';
import IgcDropdownGroupComponent from './dropdown-group.js';
import IgcDropdownItemComponent from './dropdown-item.js';
export interface IgcDropdownEventMap extends IgcToggleEventMap {
    igcChange: CustomEvent<IgcDropdownItemComponent>;
}
declare const IgcDropdownComponent_base: Constructor<import("../common/mixins/sizable.js").SizableInterface> & import("../common/mixins/constructor.js").AbstractConstructor<import("../common/mixins/event-emitter.js").EventEmitterInterface<IgcDropdownEventMap>> & Constructor<LitElement>;
/**
 * Represents a DropDown component.
 *
 * @element igc-dropdown
 *
 * @fires igcChange - Emitted when the selected item changes.
 * @fires igcOpening - Emitted just before the dropdown is open.
 * @fires igcOpened - Emitted after the dropdown is open.
 * @fires igcClosing - Emitter just before the dropdown is closed.
 * @fires igcClosed - Emitted after closing the dropdown.
 *
 * @slot target - Renders the dropdown's target element.
 * @slot - Renders the dropdown list items.
 *
 * @csspart base - The dropdown list wrapper.
 * @csspart list - The dropdown list.
 */
export default class IgcDropdownComponent extends IgcDropdownComponent_base implements IgcToggleComponent {
    /** @private */
    static readonly tagName: string;
    static styles: import("lit").CSSResult;
    protected toggleController: IgcToggleController;
    protected selectedItem: IgcDropdownItemComponent | null;
    protected activeItem: IgcDropdownItemComponent;
    protected target: HTMLElement;
    private readonly keyDownHandlers;
    protected get allItems(): IgcDropdownItemComponent[];
    private targetNodes;
    protected content: HTMLElement;
    protected scrollContainer: HTMLElement;
    protected items: Array<IgcDropdownItemComponent>;
    protected groups: Array<IgcDropdownGroupComponent>;
    /**
     * Whether the dropdown should be kept open on selection.
     * @attr keep-open-on-select
     */
    keepOpenOnSelect: boolean;
    /**
     * Sets the open state of the component.
     * @attr
     */
    open: boolean;
    /** The preferred placement of the component around the target element.
     * @type {"top" | "top-start" | "top-end" | "bottom" | "bottom-start" | "bottom-end" | "right" | "right-start" | "right-end" | "left" | "left-start" | "left-end"}
     * @attr
     */
    placement: IgcPlacement;
    /**
     * Sets the component's positioning strategy.
     * @attr position-strategy
     */
    positionStrategy: 'absolute' | 'fixed';
    /**
     * Determines the behavior of the component during scrolling the container.
     * @attr scroll-strategy
     */
    scrollStrategy: 'scroll' | 'block' | 'close';
    /**
     * Whether the component should be flipped to the opposite side of the target once it's about to overflow the visible area.
     * When true, once enough space is detected on its preferred side, it will flip back.
     * @attr
     */
    flip: boolean;
    /**
     * The distance from the target element.
     * @attr
     */
    distance: number;
    /**
     * Whether the component should be kept open on clicking outside of it.
     * @attr keep-open-on-outside-click
     */
    keepOpenOnOutsideClick: boolean;
    /**
     * Whether the dropdown's width should be the same as the target's one.
     * @attr same-width
     */
    sameWidth: boolean;
    protected toggleDirectiveChange(): void;
    protected updateOptions(): void;
    protected sizeChange(): void;
    constructor();
    firstUpdated(): Promise<void>;
    protected getUpdateComplete(): Promise<boolean>;
    protected setInitialSelection(): void;
    protected handleKeyDown: (event: KeyboardEvent) => void;
    protected onHomeKey(): void;
    protected onEndKey(): void;
    protected onEscapeKey(): void;
    protected onEnterKey(): void;
    protected handleClick(event: MouseEvent): void;
    protected handleTargetClick: () => Promise<void>;
    protected handleOpening(): boolean;
    protected handleClosing(): boolean;
    protected handleChange(item: IgcDropdownItemComponent): void;
    protected handleSlotChange(): void;
    protected handleFocusout(event: Event): void;
    protected getItem(value: string): {
        item: IgcDropdownItemComponent;
        index: number;
    };
    protected activateItem(value: IgcDropdownItemComponent): void;
    protected selectItem(item: IgcDropdownItemComponent, emit?: boolean): IgcDropdownItemComponent | null;
    protected navigate(direction: -1 | 1, currentIndex?: number): void;
    private navigateItem;
    private scrollToHiddenItem;
    protected getNearestSiblingFocusableItemIndex(startIndex: number, direction: -1 | 1): number;
    private navigateNext;
    private navigatePrev;
    protected onArrowDownKeyDown(): void;
    protected onArrowUpKeyDown(): void;
    private _hide;
    /** Shows the dropdown. */
    show(target?: HTMLElement): void;
    /** Hides the dropdown. */
    hide(): void;
    /** Toggles the open state of the dropdown. */
    toggle(target?: HTMLElement): void;
    /** Navigates to the item with the specified value. If it exists, returns the found item, otherwise - null. */
    navigateTo(value: string): IgcDropdownItemComponent | null;
    /** Navigates to the item at the specified index. If it exists, returns the found item, otherwise - null. */
    navigateTo(index: number): IgcDropdownItemComponent | null;
    /** Selects the item with the specified value. If it exists, returns the found item, otherwise - null. */
    select(value: string): IgcDropdownItemComponent | null;
    /** Selects the item at the specified index. If it exists, returns the found item, otherwise - null. */
    select(index: number): IgcDropdownItemComponent | null;
    /**  Clears the current selection of the dropdown. */
    clearSelection(): void;
    protected render(): import("lit-html").TemplateResult<1>;
}
declare global {
    interface HTMLElementTagNameMap {
        'igc-dropdown': IgcDropdownComponent;
    }
}
export {};
