{"version":3,"file":"base.js","sourceRoot":"","sources":["../../../src/components/progress/base.ts"],"names":[],"mappings":"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","sourcesContent":["import { html, LitElement, nothing } from 'lit';\nimport {\n  property,\n  query,\n  queryAssignedElements,\n  state,\n} from 'lit/decorators.js';\nimport { when } from 'lit/directives/when.js';\nimport { watch } from '../common/decorators/watch.js';\nimport { asPercent, clamp } from '../common/util.js';\n\nexport abstract class IgcProgressBaseComponent extends LitElement {\n  private initialMax!: number;\n  private initialValue!: number;\n\n  protected tick!: number;\n\n  @queryAssignedElements()\n  protected assignedElements!: Array<HTMLElement>;\n\n  @query('[part~=\"fill\"]', true)\n  protected progressIndicator!: Element;\n\n  @state()\n  protected percentage = 0;\n\n  /**\n   * Maximum value of the control.\n   * @attr\n   */\n  @property({ type: Number })\n  public max = 100;\n\n  /**\n   * The value of the control.\n   * @attr\n   */\n  @property({ type: Number })\n  public value = 0;\n\n  /**\n   * The variant of the control.\n   * @attr\n   */\n  @property({ reflect: true })\n  public variant: 'primary' | 'info' | 'success' | 'warning' | 'danger' =\n    'primary';\n\n  /**\n   * Animation duration in milliseconds.\n   * @attr animation-duration\n   */\n  @property({ type: Number, attribute: 'animation-duration' })\n  public animationDuration = 500;\n\n  /**\n   * The indeterminate state of the control.\n   * @attr\n   */\n  @property({ type: Boolean, reflect: false })\n  public indeterminate = false;\n\n  /**\n   * Shows/hides the label of the control.\n   * @attr hide-label\n   */\n  @property({ type: Boolean, attribute: 'hide-label', reflect: false })\n  public hideLabel = false;\n\n  /**\n   * Format string for the default label of the control.\n   * Placeholders:\n   *  {0} - current value of the control.\n   *  {1} - max value of the control.\n   * @attr label-format\n   */\n  @property({ attribute: 'label-format' })\n  public labelFormat!: string;\n\n  @watch('indeterminate', { waitUntilFirstUpdate: true })\n  protected indeterminateChange() {\n    this.cancelAnimations();\n    if (!this.indeterminate) {\n      this.percentage = Math.floor(asPercent(this.value, this.max));\n    }\n  }\n\n  @watch('max', { waitUntilFirstUpdate: true })\n  protected maxChange() {\n    this.max = Math.max(0, this.max);\n    if (this.value > this.max) {\n      this.value = this.max;\n    } else {\n      if (!this.indeterminate) {\n        this.animateLabelTo(this.max, this.value);\n      }\n    }\n  }\n\n  @watch('value', { waitUntilFirstUpdate: true })\n  protected valueChange(oldVal: number) {\n    this.value = clamp(this.value, 0, this.max);\n    if (!this.indeterminate) {\n      cancelAnimationFrame(this.tick);\n      if (this.percentage !== Math.floor(asPercent(this.value, this.max))) {\n        this.animateLabelTo(oldVal, this.value);\n      }\n    }\n  }\n\n  protected slotChanges() {\n    this.requestUpdate();\n  }\n\n  public override connectedCallback(): void {\n    super.connectedCallback();\n    this.initialMax = Math.max(0, this.max);\n    this.initialValue = clamp(this.value, 0, this.initialMax);\n    this.value = 0;\n    this.max = 100;\n  }\n\n  protected override firstUpdated() {\n    if (!this.indeterminate) {\n      // trigger transition initially\n      setTimeout(() => {\n        this.max = this.initialMax;\n        this.value = this.initialValue;\n      }, 0);\n    }\n  }\n\n  protected cancelAnimations() {\n    requestAnimationFrame(() => {\n      this.progressIndicator?.getAnimations().forEach((animation) => {\n        if (animation instanceof CSSTransition) {\n          animation.cancel();\n        }\n      });\n    });\n    cancelAnimationFrame(this.tick);\n  }\n\n  protected animateLabelTo(start: number, end: number) {\n    let t0: number;\n\n    const tick = (t1: number) => {\n      t0 = t0 ?? t1;\n\n      const progress = Math.min((t1 - t0) / (this.animationDuration || 1), 1);\n      this.percentage = Math.floor(\n        asPercent(progress * (end - start) + start, this.max)\n      );\n      progress < 1\n        ? (this.tick = requestAnimationFrame(tick))\n        : cancelAnimationFrame(this.tick);\n    };\n\n    requestAnimationFrame(tick);\n  }\n\n  protected renderLabelFormat() {\n    return this.labelFormat\n      .replace(/\\{0\\}/gm, `${this.value}`)\n      .replace(/\\{1\\}/gm, `${this.max}`);\n  }\n\n  protected renderDefaultSlot() {\n    return html`<slot part=\"label\" @slotchange=${this.slotChanges}></slot>\n      ${when(\n        this.indeterminate || this.hideLabel || this.assignedElements.length,\n        () => nothing,\n        () => html`<span part=\"label value\">${this.renderLabelText()}</span>`\n      )}`;\n  }\n\n  protected renderLabelText() {\n    return this.labelFormat ? this.renderLabelFormat() : `${this.percentage}%`;\n  }\n}\n"]}