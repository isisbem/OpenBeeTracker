var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { html, LitElement, nothing } from 'lit';
import { property, query, queryAssignedElements, state, } from 'lit/decorators.js';
import { when } from 'lit/directives/when.js';
import { watch } from '../common/decorators/watch.js';
import { asPercent, clamp } from '../common/util.js';
export class IgcProgressBaseComponent extends LitElement {
    constructor() {
        super(...arguments);
        this.percentage = 0;
        this.max = 100;
        this.value = 0;
        this.variant = 'primary';
        this.animationDuration = 500;
        this.indeterminate = false;
        this.hideLabel = false;
    }
    indeterminateChange() {
        this.cancelAnimations();
        if (!this.indeterminate) {
            this.percentage = Math.floor(asPercent(this.value, this.max));
        }
    }
    maxChange() {
        this.max = Math.max(0, this.max);
        if (this.value > this.max) {
            this.value = this.max;
        }
        else {
            if (!this.indeterminate) {
                this.animateLabelTo(this.max, this.value);
            }
        }
    }
    valueChange(oldVal) {
        this.value = clamp(this.value, 0, this.max);
        if (!this.indeterminate) {
            cancelAnimationFrame(this.tick);
            if (this.percentage !== Math.floor(asPercent(this.value, this.max))) {
                this.animateLabelTo(oldVal, this.value);
            }
        }
    }
    slotChanges() {
        this.requestUpdate();
    }
    connectedCallback() {
        super.connectedCallback();
        this.initialMax = Math.max(0, this.max);
        this.initialValue = clamp(this.value, 0, this.initialMax);
        this.value = 0;
        this.max = 100;
    }
    firstUpdated() {
        if (!this.indeterminate) {
            setTimeout(() => {
                this.max = this.initialMax;
                this.value = this.initialValue;
            }, 0);
        }
    }
    cancelAnimations() {
        requestAnimationFrame(() => {
            var _a;
            (_a = this.progressIndicator) === null || _a === void 0 ? void 0 : _a.getAnimations().forEach((animation) => {
                if (animation instanceof CSSTransition) {
                    animation.cancel();
                }
            });
        });
        cancelAnimationFrame(this.tick);
    }
    animateLabelTo(start, end) {
        let t0;
        const tick = (t1) => {
            t0 = t0 !== null && t0 !== void 0 ? t0 : t1;
            const progress = Math.min((t1 - t0) / (this.animationDuration || 1), 1);
            this.percentage = Math.floor(asPercent(progress * (end - start) + start, this.max));
            progress < 1
                ? (this.tick = requestAnimationFrame(tick))
                : cancelAnimationFrame(this.tick);
        };
        requestAnimationFrame(tick);
    }
    renderLabelFormat() {
        return this.labelFormat
            .replace(/\{0\}/gm, `${this.value}`)
            .replace(/\{1\}/gm, `${this.max}`);
    }
    renderDefaultSlot() {
        return html `<slot part="label" @slotchange=${this.slotChanges}></slot>
      ${when(this.indeterminate || this.hideLabel || this.assignedElements.length, () => nothing, () => html `<span part="label value">${this.renderLabelText()}</span>`)}`;
    }
    renderLabelText() {
        return this.labelFormat ? this.renderLabelFormat() : `${this.percentage}%`;
    }
}
__decorate([
    queryAssignedElements()
], IgcProgressBaseComponent.prototype, "assignedElements", void 0);
__decorate([
    query('[part~="fill"]', true)
], IgcProgressBaseComponent.prototype, "progressIndicator", void 0);
__decorate([
    state()
], IgcProgressBaseComponent.prototype, "percentage", void 0);
__decorate([
    property({ type: Number })
], IgcProgressBaseComponent.prototype, "max", void 0);
__decorate([
    property({ type: Number })
], IgcProgressBaseComponent.prototype, "value", void 0);
__decorate([
    property({ reflect: true })
], IgcProgressBaseComponent.prototype, "variant", void 0);
__decorate([
    property({ type: Number, attribute: 'animation-duration' })
], IgcProgressBaseComponent.prototype, "animationDuration", void 0);
__decorate([
    property({ type: Boolean, reflect: false })
], IgcProgressBaseComponent.prototype, "indeterminate", void 0);
__decorate([
    property({ type: Boolean, attribute: 'hide-label', reflect: false })
], IgcProgressBaseComponent.prototype, "hideLabel", void 0);
__decorate([
    property({ attribute: 'label-format' })
], IgcProgressBaseComponent.prototype, "labelFormat", void 0);
__decorate([
    watch('indeterminate', { waitUntilFirstUpdate: true })
], IgcProgressBaseComponent.prototype, "indeterminateChange", null);
__decorate([
    watch('max', { waitUntilFirstUpdate: true })
], IgcProgressBaseComponent.prototype, "maxChange", null);
__decorate([
    watch('value', { waitUntilFirstUpdate: true })
], IgcProgressBaseComponent.prototype, "valueChange", null);
//# sourceMappingURL=base.js.map