var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { LitElement, html } from 'lit';
import { property, queryAssignedElements } from 'lit/decorators.js';
import { styles } from './themes/accordion.base.css.js';
import { defineComponents } from '../common/definitions/defineComponents.js';
import IgcExpansionPanelComponent from '../expansion-panel/expansion-panel.js';
import { blazorSuppress } from '../common/decorators/blazorSuppress.js';
defineComponents(IgcExpansionPanelComponent);
export default class IgcAccordionComponent extends LitElement {
    get _enabledPanels() {
        return this.panels.filter((p) => !p.disabled);
    }
    constructor() {
        super();
        this.singleExpand = false;
        this.handleKeydown = (event) => {
            if (event.target.tagName.toLowerCase() !==
                'igc-expansion-panel' ||
                !this._enabledPanels.includes(event.target)) {
                return;
            }
            switch (event.key.toLowerCase()) {
                case 'home':
                    this.getPanelHeader(this._enabledPanels.at(0)).focus();
                    break;
                case 'end':
                    this.getPanelHeader(this._enabledPanels.at(-1)).focus();
                    break;
                case 'arrowup':
                case 'up':
                    this.handleUpDownArrow(true, event);
                    break;
                case 'arrowdown':
                case 'down':
                    this.handleUpDownArrow(false, event);
                    break;
            }
        };
        this.addEventListener('keydown', this.handleKeydown, { capture: true });
        this.addEventListener('igcOpening', this.handlePanelOpening);
    }
    handlePanelOpening(event) {
        const panel = event.target;
        if (!this.singleExpand || !this.panels.includes(panel)) {
            return;
        }
        this._enabledPanels.forEach((p) => {
            if (p.open && p !== panel) {
                this.closePanel(p);
            }
        });
    }
    handleUpDownArrow(isUp, event) {
        const focusedPanel = event.target;
        if (!event.altKey) {
            const next = this.getNextPanel(focusedPanel, isUp ? -1 : 1);
            if (next === focusedPanel) {
                return;
            }
            this.getPanelHeader(next).focus();
        }
        if (event.shiftKey && event.altKey) {
            if (this.singleExpand && !isUp) {
                this._enabledPanels.forEach((p) => p !== focusedPanel ? this.closePanel(p) : this.openPanel(p));
                return;
            }
            if (isUp) {
                this._enabledPanels.forEach((p) => this.closePanel(p));
            }
            else {
                this._enabledPanels.forEach((p) => this.openPanel(p));
            }
        }
    }
    getNextPanel(panel, dir = 1) {
        const panelIndex = this._enabledPanels.indexOf(panel);
        return this._enabledPanels[panelIndex + dir] || panel;
    }
    getPanelHeader(panel) {
        var _a;
        return (_a = panel.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('div[part="header"]');
    }
    async closePanel(panel) {
        if (!panel.open) {
            return;
        }
        if (!panel.emitEvent('igcClosing', { cancelable: true, detail: panel })) {
            return;
        }
        panel.hide();
        await panel.updateComplete;
        panel.emitEvent('igcClosed', { detail: panel });
    }
    async openPanel(panel) {
        if (panel.open) {
            return;
        }
        if (!panel.emitEvent('igcOpening', { cancelable: true, detail: panel })) {
            return;
        }
        panel.show();
        await panel.updateComplete;
        panel.emitEvent('igcOpened', { detail: panel });
    }
    hideAll() {
        this.panels.forEach((p) => p.hide());
    }
    showAll() {
        this.panels.forEach((p) => p.show());
    }
    render() {
        return html `<slot></slot>`;
    }
}
IgcAccordionComponent.tagName = 'igc-accordion';
IgcAccordionComponent.styles = styles;
__decorate([
    property({ attribute: 'single-expand', reflect: true, type: Boolean })
], IgcAccordionComponent.prototype, "singleExpand", void 0);
__decorate([
    queryAssignedElements({ selector: 'igc-expansion-panel' }),
    blazorSuppress()
], IgcAccordionComponent.prototype, "panels", void 0);
//# sourceMappingURL=accordion.js.map