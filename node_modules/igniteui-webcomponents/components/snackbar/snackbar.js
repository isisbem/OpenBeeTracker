var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { html, LitElement, nothing } from 'lit';
import { property } from 'lit/decorators.js';
import { ifDefined } from 'lit/directives/if-defined.js';
import { themes } from '../../theming/theming-decorator.js';
import { EventEmitterMixin } from '../common/mixins/event-emitter.js';
import { styles } from './themes/light/snackbar.base.css.js';
import { styles as bootstrap } from './themes/light/snackbar.bootstrap.css.js';
import { styles as fluent } from './themes/light/snackbar.fluent.css.js';
import { styles as indigo } from './themes/light/snackbar.indigo.css.js';
import { defineComponents } from '../common/definitions/defineComponents.js';
import IgcButtonComponent from '../button/button.js';
defineComponents(IgcButtonComponent);
let IgcSnackbarComponent = class IgcSnackbarComponent extends EventEmitterMixin(LitElement) {
    constructor() {
        super(...arguments);
        this.open = false;
        this.displayTime = 4000;
        this.keepOpen = false;
    }
    show() {
        if (this.open) {
            return;
        }
        this.open = true;
        clearTimeout(this.autoHideTimeout);
        if (this.open && !this.keepOpen) {
            this.autoHideTimeout = window.setTimeout(() => this.hide(), this.displayTime);
        }
    }
    hide() {
        if (!this.open) {
            return;
        }
        this.open = false;
        clearTimeout(this.autoHideTimeout);
    }
    toggle() {
        this.open ? this.hide() : this.show();
    }
    handleClick() {
        this.emitEvent('igcAction');
    }
    render() {
        return html `
      <div part="base">
        <span part="message">
          <slot></slot>
        </span>
        ${this.actionText
            ? html `
              <igc-button
                variant="flat"
                part="action"
                size="small"
                @click=${this.handleClick}
              >
                ${ifDefined(this.actionText)}
              </igc-button>
            `
            : nothing}
      </div>
    `;
    }
};
IgcSnackbarComponent.tagName = 'igc-snackbar';
IgcSnackbarComponent.styles = styles;
__decorate([
    property({ type: Boolean, reflect: true })
], IgcSnackbarComponent.prototype, "open", void 0);
__decorate([
    property({ type: Number, attribute: 'display-time' })
], IgcSnackbarComponent.prototype, "displayTime", void 0);
__decorate([
    property({ type: Boolean, attribute: 'keep-open' })
], IgcSnackbarComponent.prototype, "keepOpen", void 0);
__decorate([
    property({ attribute: 'action-text' })
], IgcSnackbarComponent.prototype, "actionText", void 0);
IgcSnackbarComponent = __decorate([
    themes({ bootstrap, fluent, indigo })
], IgcSnackbarComponent);
export default IgcSnackbarComponent;
//# sourceMappingURL=snackbar.js.map