var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { html, LitElement } from 'lit';
import { property } from 'lit/decorators.js';
import { watch } from '../common/decorators/watch.js';
import { styles } from './themes/light/tree.base.css.js';
import { EventEmitterMixin } from '../common/mixins/event-emitter.js';
import { SizableMixin } from '../common/mixins/sizable.js';
import { IgcTreeNavigationService } from './tree.navigation.js';
import { IgcTreeSelectionService } from './tree.selection.js';
import { blazorSuppress } from '../common/decorators/blazorSuppress.js';
import { blazorAdditionalDependencies } from '../common/decorators/blazorAdditionalDependencies.js';
import { defineComponents } from '../common/definitions/defineComponents.js';
import IgcTreeItemComponent from './tree-item.js';
defineComponents(IgcTreeItemComponent);
let IgcTreeComponent = class IgcTreeComponent extends SizableMixin(EventEmitterMixin(LitElement)) {
    onDirChange() {
        var _a;
        (_a = this.items) === null || _a === void 0 ? void 0 : _a.forEach((item) => {
            item.requestUpdate();
        });
    }
    onSizeChange() {
        var _a, _b, _c;
        (_a = this.items) === null || _a === void 0 ? void 0 : _a.forEach((item) => {
            item.requestUpdate();
        });
        (_c = (_b = this.navService.activeItem) === null || _b === void 0 ? void 0 : _b.wrapper) === null || _c === void 0 ? void 0 : _c.scrollIntoView({
            behavior: 'smooth',
            block: 'nearest',
            inline: 'nearest',
        });
    }
    selectionModeChange() {
        var _a;
        this.selectionService.clearItemsSelection();
        (_a = this.items) === null || _a === void 0 ? void 0 : _a.forEach((item) => {
            item.requestUpdate();
        });
    }
    singleBranchExpandChange() {
        if (this.singleBranchExpand) {
            if (this.navService.activeItem) {
                const path = this.navService.activeItem.path;
                const remainExpanded = new Set(path.splice(0, path.length - 1));
                this.items.forEach((item) => {
                    if (!remainExpanded.has(item)) {
                        item.collapseWithEvent();
                    }
                });
            }
            else {
                this.items.forEach((item) => item.collapseWithEvent());
            }
        }
    }
    constructor() {
        super();
        this.singleBranchExpand = false;
        this.selection = 'none';
        this.dir = 'auto';
        this.selectionService = new IgcTreeSelectionService(this);
        this.navService = new IgcTreeNavigationService(this, this.selectionService);
    }
    connectedCallback() {
        super.connectedCallback();
        this.setAttribute('role', 'tree');
        this.addEventListener('keydown', this.handleKeydown);
        this.items.forEach((i) => {
            i.init = true;
        });
        const firstNotDisabledItem = this.items.find((i) => !i.disabled);
        if (firstNotDisabledItem) {
            firstNotDisabledItem.tabIndex = 0;
            this.navService.focusItem(firstNotDisabledItem);
        }
    }
    get items() {
        return Array.from(this.querySelectorAll(`igc-tree-item`));
    }
    handleKeydown(event) {
        this.navService.handleKeydown(event);
    }
    expandToItem(item) {
        if (item && item.parent) {
            item.path.forEach((i) => {
                if (i !== item && !i.expanded) {
                    i.expanded = true;
                }
            });
        }
    }
    select(items) {
        if (!items) {
            items =
                this.selection === 'cascade'
                    ? this.items.filter((item) => item.level === 0)
                    : this.items;
        }
        this.selectionService.selectItemsWithNoEvent(items);
    }
    deselect(items) {
        this.selectionService.deselectItemsWithNoEvent(items);
    }
    expand(items) {
        items = items || this.items;
        items.forEach((item) => (item.expanded = true));
    }
    collapse(items) {
        items = items || this.items;
        items.forEach((item) => (item.expanded = false));
    }
    render() {
        return html `<slot></slot>`;
    }
};
IgcTreeComponent.tagName = 'igc-tree';
IgcTreeComponent.styles = styles;
__decorate([
    blazorSuppress()
], IgcTreeComponent.prototype, "selectionService", void 0);
__decorate([
    blazorSuppress()
], IgcTreeComponent.prototype, "navService", void 0);
__decorate([
    property({ attribute: 'single-branch-expand', reflect: true, type: Boolean })
], IgcTreeComponent.prototype, "singleBranchExpand", void 0);
__decorate([
    property({ reflect: true })
], IgcTreeComponent.prototype, "selection", void 0);
__decorate([
    property({ reflect: true })
], IgcTreeComponent.prototype, "dir", void 0);
__decorate([
    watch('dir')
], IgcTreeComponent.prototype, "onDirChange", null);
__decorate([
    watch('size', { waitUntilFirstUpdate: true })
], IgcTreeComponent.prototype, "onSizeChange", null);
__decorate([
    watch('selection', { waitUntilFirstUpdate: true })
], IgcTreeComponent.prototype, "selectionModeChange", null);
__decorate([
    watch('singleBranchExpand')
], IgcTreeComponent.prototype, "singleBranchExpandChange", null);
__decorate([
    blazorSuppress()
], IgcTreeComponent.prototype, "items", null);
__decorate([
    blazorSuppress()
], IgcTreeComponent.prototype, "select", null);
__decorate([
    blazorSuppress()
], IgcTreeComponent.prototype, "deselect", null);
__decorate([
    blazorSuppress()
], IgcTreeComponent.prototype, "expand", null);
__decorate([
    blazorSuppress()
], IgcTreeComponent.prototype, "collapse", null);
IgcTreeComponent = __decorate([
    blazorAdditionalDependencies('IgcTreeItemComponent')
], IgcTreeComponent);
export default IgcTreeComponent;
//# sourceMappingURL=tree.js.map