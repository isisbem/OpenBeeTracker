var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { property, query, queryAssignedElements, state, } from 'lit/decorators.js';
import { html, LitElement } from 'lit';
import { partNameMap } from '../common/util.js';
import { styles } from './themes/light/tree-item.base.css.js';
import { styles as bootstrap } from './themes/light/tree-item.bootstrap.css.js';
import { styles as fluent } from './themes/light/tree-item.fluent.css.js';
import { styles as indigo } from './themes/light/tree-item.indigo.css.js';
import { watch } from '../common/decorators/watch.js';
import { themes } from '../../theming/theming-decorator.js';
import { blazorSuppress } from '../common/decorators/blazorSuppress.js';
import { defineComponents } from '../common/definitions/defineComponents.js';
import IgcIconComponent from '../icon/icon.js';
import IgcCheckboxComponent from '../checkbox/checkbox.js';
import IgcCircularProgressComponent from '../progress/circular-progress.js';
defineComponents(IgcIconComponent, IgcCheckboxComponent, IgcCircularProgressComponent);
const sizeMultiplier = {
    small: 1 / 2,
    medium: 2 / 3,
    large: 1,
};
let IgcTreeItemComponent = class IgcTreeItemComponent extends LitElement {
    constructor() {
        super(...arguments);
        this.focusedProgrammatically = false;
        this.parent = null;
        this.init = false;
        this.isFocused = false;
        this.hasChildren = false;
        this.level = 0;
        this.indeterminate = false;
        this.label = '';
        this.expanded = false;
        this.active = false;
        this.disabled = false;
        this.selected = false;
        this.loading = false;
        this.value = undefined;
    }
    bothChange() {
        if (this.hasChildren) {
            this.setAttribute('aria-expanded', this.expanded.toString());
        }
        else {
            this.removeAttribute('aria-expanded');
        }
    }
    expandedChange(oldValue) {
        var _a;
        (_a = this.navService) === null || _a === void 0 ? void 0 : _a.update_visible_cache(this, this.expanded);
        if (!oldValue) {
            return;
        }
        Promise.resolve().then(() => {
            var _a, _b, _c, _d;
            if (((_a = this.navService) === null || _a === void 0 ? void 0 : _a.focusedItem) !== this && !this.isFocused) {
                (_d = (_c = (_b = this.navService) === null || _b === void 0 ? void 0 : _b.focusedItem) === null || _c === void 0 ? void 0 : _c.wrapper) === null || _d === void 0 ? void 0 : _d.scrollIntoView({
                    behavior: 'smooth',
                    block: 'nearest',
                    inline: 'nearest',
                });
            }
        });
    }
    activeChange() {
        var _a, _b;
        if ((this.active && ((_a = this.navService) === null || _a === void 0 ? void 0 : _a.activeItem) === this) || !this.active) {
            return;
        }
        if (this.navService) {
            this.navService.setActiveItem(this, false);
        }
        (_b = this.tree) === null || _b === void 0 ? void 0 : _b.expandToItem(this);
        Promise.resolve().then(() => {
            var _a;
            (_a = this.wrapper) === null || _a === void 0 ? void 0 : _a.scrollIntoView({
                behavior: 'smooth',
                block: 'nearest',
                inline: 'nearest',
            });
        });
    }
    disabledChange() {
        var _a;
        (_a = this.navService) === null || _a === void 0 ? void 0 : _a.update_disabled_cache(this);
    }
    selectedChange() {
        var _a, _b, _c, _d;
        if (this.selected && !((_a = this.selectionService) === null || _a === void 0 ? void 0 : _a.isItemSelected(this))) {
            (_b = this.selectionService) === null || _b === void 0 ? void 0 : _b.selectItemsWithNoEvent([this]);
        }
        if (!this.selected && ((_c = this.selectionService) === null || _c === void 0 ? void 0 : _c.isItemSelected(this))) {
            (_d = this.selectionService) === null || _d === void 0 ? void 0 : _d.deselectItemsWithNoEvent([this]);
        }
    }
    connectedCallback() {
        var _a, _b;
        super.connectedCallback();
        this.tree = this.closest('igc-tree');
        this.parent =
            ((_a = this.parentElement) === null || _a === void 0 ? void 0 : _a.tagName.toLowerCase()) === 'igc-tree-item'
                ? this.parentElement
                : null;
        this.level = this.parent ? this.parent.level + 1 : 0;
        this.setAttribute('role', 'treeitem');
        this.addEventListener('blur', this.onBlur);
        this.addEventListener('focus', this.onFocus);
        this.addEventListener('pointerdown', this.pointerDown);
        this.activeChange();
        if (this.init) {
            this.selectedChange();
        }
        else {
            (_b = this.selectionService) === null || _b === void 0 ? void 0 : _b.retriggerItemState(this);
        }
        this.init = false;
    }
    disconnectedCallback() {
        var _a, _b;
        super.disconnectedCallback();
        (_a = this.selectionService) === null || _a === void 0 ? void 0 : _a.ensureStateOnItemDelete(this);
        (_b = this.navService) === null || _b === void 0 ? void 0 : _b.delete_item(this);
    }
    get selectionService() {
        var _a;
        return (_a = this.tree) === null || _a === void 0 ? void 0 : _a.selectionService;
    }
    get navService() {
        var _a;
        return (_a = this.tree) === null || _a === void 0 ? void 0 : _a.navService;
    }
    get parts() {
        return {
            selected: this.selected,
            focused: this.isFocused,
            active: this.active,
        };
    }
    get directChildren() {
        return Array.from(this.children).filter((x) => x.tagName.toLowerCase() === 'igc-tree-item');
    }
    get allChildren() {
        return Array.from(this.querySelectorAll(`igc-tree-item`));
    }
    get path() {
        var _a;
        return ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.path) ? [...this.parent.path, this] : [this];
    }
    pointerDown(event) {
        var _a;
        event.stopPropagation();
        if (this.disabled) {
            return;
        }
        this.tabIndex = 0;
        (_a = this.navService) === null || _a === void 0 ? void 0 : _a.setFocusedAndActiveItem(this, true, false);
    }
    expandIndicatorClick() {
        if (this.disabled) {
            return;
        }
        if (this.expanded) {
            this.collapseWithEvent();
        }
        else {
            this.expandWithEvent();
        }
    }
    selectorClick(event) {
        var _a, _b, _c;
        event.preventDefault();
        if (event.shiftKey) {
            (_a = this.selectionService) === null || _a === void 0 ? void 0 : _a.selectMultipleItems(this);
            return;
        }
        if (this.selected) {
            (_b = this.selectionService) === null || _b === void 0 ? void 0 : _b.deselectItem(this);
        }
        else {
            (_c = this.selectionService) === null || _c === void 0 ? void 0 : _c.selectItem(this);
        }
    }
    onFocus() {
        var _a, _b, _c;
        if (this.disabled) {
            return;
        }
        if (((_a = this.navService) === null || _a === void 0 ? void 0 : _a.focusedItem) !== this) {
            (_b = this.navService) === null || _b === void 0 ? void 0 : _b.focusItem(this, false);
            (_c = this.wrapper) === null || _c === void 0 ? void 0 : _c.scrollIntoView({
                behavior: 'smooth',
                block: 'nearest',
                inline: 'nearest',
            });
        }
        if (this.tabbableEl && this.tabbableEl.length) {
            this.tabbableEl.forEach((element) => {
                element.tabIndex = 0;
            });
            this.focusedProgrammatically = true;
            this.tabbableEl[0].focus();
            return;
        }
        this.isFocused = true;
    }
    onBlur() {
        this.isFocused = false;
    }
    onFocusIn(ev) {
        var _a;
        ev === null || ev === void 0 ? void 0 : ev.stopPropagation();
        if (!this.disabled) {
            if (!this.focusedProgrammatically) {
                (_a = this.tabbableEl) === null || _a === void 0 ? void 0 : _a.forEach((element) => {
                    element.tabIndex = 0;
                });
            }
            this.removeAttribute('tabIndex');
            this.isFocused = true;
            this.focusedProgrammatically = false;
        }
    }
    onFocusOut(ev) {
        var _a, _b;
        ev === null || ev === void 0 ? void 0 : ev.stopPropagation();
        this.isFocused = false;
        (_a = this.tabbableEl) === null || _a === void 0 ? void 0 : _a.forEach((element) => {
            element.tabIndex = -1;
        });
        if (((_b = this.navService) === null || _b === void 0 ? void 0 : _b.focusedItem) === this) {
            this.setAttribute('tabindex', '0');
        }
    }
    labelChange() {
        const firstElement = this.contentList[0];
        const tabbableSelector = 'a[href], button, input, textarea, select, details, [tabindex]:not([tabindex="-1"])';
        this.tabbableEl = [
            ...firstElement.querySelectorAll(tabbableSelector),
        ];
        if (firstElement.matches(tabbableSelector)) {
            this.tabbableEl.splice(0, 0, firstElement);
        }
        if (this.tabbableEl && this.tabbableEl.length) {
            this.setAttribute('role', 'none');
            this.tabbableEl[0].setAttribute('role', 'treeitem');
            this.tabbableEl.forEach((element) => {
                element.tabIndex = -1;
            });
        }
        else {
            this.setAttribute('role', 'treeitem');
        }
    }
    handleChange() {
        var _a;
        this.hasChildren = !!this.directChildren.length;
        (_a = this.navService) === null || _a === void 0 ? void 0 : _a.update_visible_cache(this, this.expanded, false);
    }
    getChildren(options = { flatten: false }) {
        if (options.flatten) {
            return this.allChildren;
        }
        else {
            return this.directChildren;
        }
    }
    expandWithEvent() {
        var _a, _b, _c;
        if (this.expanded) {
            return;
        }
        const args = {
            detail: this,
            cancelable: true,
        };
        const allowed = (_a = this.tree) === null || _a === void 0 ? void 0 : _a.emitEvent('igcItemExpanding', args);
        if (!allowed) {
            return;
        }
        if ((_b = this.tree) === null || _b === void 0 ? void 0 : _b.singleBranchExpand) {
            const pathSet = new Set(this.path.splice(0, this.path.length - 1));
            this.tree.items.forEach((item) => {
                if (!pathSet.has(item)) {
                    item.collapseWithEvent();
                }
            });
        }
        this.expanded = true;
        (_c = this.tree) === null || _c === void 0 ? void 0 : _c.emitEvent('igcItemExpanded', { detail: this });
    }
    collapseWithEvent() {
        var _a, _b;
        if (!this.expanded) {
            return;
        }
        const args = {
            detail: this,
            cancelable: true,
        };
        const allowed = (_a = this.tree) === null || _a === void 0 ? void 0 : _a.emitEvent('igcItemCollapsing', args);
        if (!allowed) {
            return;
        }
        this.expanded = false;
        (_b = this.tree) === null || _b === void 0 ? void 0 : _b.emitEvent('igcItemCollapsed', { detail: this });
    }
    toggle() {
        this.expanded = !this.expanded;
    }
    expand() {
        this.expanded = true;
    }
    collapse() {
        this.expanded = false;
    }
    render() {
        var _a, _b, _c;
        const size = this.level * (this.tree ? sizeMultiplier[this.tree.size] : 1);
        return html `
      <div
        id="wrapper"
        part="wrapper ${(_a = this.tree) === null || _a === void 0 ? void 0 : _a.size} ${partNameMap(this.parts)}"
      >
        <div
          style="width: calc(${size} * var(--igc-tree-indentation-size))"
          part="indentation"
          aria-hidden="true"
        >
          <slot name="indentation"></slot>
        </div>
        <div part="indicator" aria-hidden="true">
          ${this.loading
            ? html `
                <slot name="loading">
                  <igc-circular-progress indeterminate></igc-circular-progress>
                </slot>
              `
            : html `
                <slot name="indicator" @click=${this.expandIndicatorClick}>
                  ${this.hasChildren
                ? html `
                        <igc-icon
                          name=${this.expanded
                    ? 'keyboard_arrow_down'
                    : ((_b = this.tree) === null || _b === void 0 ? void 0 : _b.dir) === 'rtl'
                        ? 'navigate_before'
                        : 'keyboard_arrow_right'}
                          collection="internal"
                        >
                        </igc-icon>
                      `
                : ''}
                </slot>
              `}
        </div>
        ${((_c = this.tree) === null || _c === void 0 ? void 0 : _c.selection) !== 'none'
            ? html `
              <div part="select" aria-hidden="true">
                <igc-checkbox
                  @click=${this.selectorClick}
                  .checked=${this.selected}
                  .indeterminate=${this.indeterminate}
                  .disabled=${this.disabled}
                  tabindex="-1"
                >
                </igc-checkbox>
              </div>
            `
            : ''}
        <div part="label">
          <slot
            name="label"
            @slotchange=${this.labelChange}
            @focusin=${this.onFocusIn}
            @focusout=${this.onFocusOut}
          >
            <span part="text">${this.label}</span>
          </slot>
        </div>
      </div>
      <div role="group">
        <slot @slotchange=${this.handleChange} ?hidden=${!this.expanded}></slot>
      </div>
    `;
    }
};
IgcTreeItemComponent.tagName = 'igc-tree-item';
IgcTreeItemComponent.styles = styles;
__decorate([
    blazorSuppress()
], IgcTreeItemComponent.prototype, "tree", void 0);
__decorate([
    blazorSuppress()
], IgcTreeItemComponent.prototype, "init", void 0);
__decorate([
    queryAssignedElements({ slot: 'label', flatten: true })
], IgcTreeItemComponent.prototype, "contentList", void 0);
__decorate([
    query('#wrapper'),
    blazorSuppress()
], IgcTreeItemComponent.prototype, "wrapper", void 0);
__decorate([
    state()
], IgcTreeItemComponent.prototype, "isFocused", void 0);
__decorate([
    state(),
    blazorSuppress()
], IgcTreeItemComponent.prototype, "hasChildren", void 0);
__decorate([
    state()
], IgcTreeItemComponent.prototype, "level", void 0);
__decorate([
    state(),
    blazorSuppress()
], IgcTreeItemComponent.prototype, "indeterminate", void 0);
__decorate([
    property()
], IgcTreeItemComponent.prototype, "label", void 0);
__decorate([
    property({ reflect: true, type: Boolean })
], IgcTreeItemComponent.prototype, "expanded", void 0);
__decorate([
    property({ reflect: true, type: Boolean })
], IgcTreeItemComponent.prototype, "active", void 0);
__decorate([
    property({ reflect: true, type: Boolean })
], IgcTreeItemComponent.prototype, "disabled", void 0);
__decorate([
    property({ reflect: true, type: Boolean })
], IgcTreeItemComponent.prototype, "selected", void 0);
__decorate([
    property({ reflect: true, type: Boolean })
], IgcTreeItemComponent.prototype, "loading", void 0);
__decorate([
    property({ attribute: true })
], IgcTreeItemComponent.prototype, "value", void 0);
__decorate([
    watch('expanded', { waitUntilFirstUpdate: true }),
    watch('hasChildren', { waitUntilFirstUpdate: true })
], IgcTreeItemComponent.prototype, "bothChange", null);
__decorate([
    watch('expanded')
], IgcTreeItemComponent.prototype, "expandedChange", null);
__decorate([
    watch('active', { waitUntilFirstUpdate: true })
], IgcTreeItemComponent.prototype, "activeChange", null);
__decorate([
    watch('disabled')
], IgcTreeItemComponent.prototype, "disabledChange", null);
__decorate([
    watch('selected', { waitUntilFirstUpdate: true })
], IgcTreeItemComponent.prototype, "selectedChange", null);
__decorate([
    blazorSuppress()
], IgcTreeItemComponent.prototype, "getChildren", null);
IgcTreeItemComponent = __decorate([
    themes({ bootstrap, fluent, indigo })
], IgcTreeItemComponent);
export default IgcTreeItemComponent;
//# sourceMappingURL=tree-item.js.map