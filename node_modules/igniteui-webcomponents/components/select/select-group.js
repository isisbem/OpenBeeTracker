var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { property, queryAssignedElements } from 'lit/decorators.js';
import { watch } from '../common/decorators/watch.js';
import IgcDropdownGroupComponent from '../dropdown/dropdown-group.js';
export default class IgcSelectGroupComponent extends IgcDropdownGroupComponent {
    constructor() {
        super();
        this.disabled = false;
        this.observer = new MutationObserver(this.updateControlledItems.bind(this));
    }
    disconnectedCallback() {
        this.observer.disconnect();
        super.disconnectedCallback();
    }
    getParent() {
        return this.closest('igc-select');
    }
    async firstUpdated() {
        await this.updateComplete;
        this.controlledItems = this.activeItems;
        this.setAttribute('role', 'presentation');
        this.items.forEach((i) => {
            this.observer.observe(i, {
                attributes: true,
                attributeFilter: ['disabled'],
            });
        });
        this.updateDisabled();
    }
    updateControlledItems(mutations) {
        mutations.forEach((mutation) => {
            const item = mutation.target;
            if (!this.disabled) {
                this.controlledItems = this.activeItems;
            }
            if (this.disabled && !item.disabled) {
                item.disabled = true;
            }
        });
    }
    updateDisabled() {
        var _a;
        this.disabled
            ? this.setAttribute('aria-disabled', 'true')
            : this.removeAttribute('aria-disabled');
        (_a = this.controlledItems) === null || _a === void 0 ? void 0 : _a.forEach((i) => (i.disabled = this.disabled));
    }
}
IgcSelectGroupComponent.tagName = 'igc-select-group';
__decorate([
    queryAssignedElements({ flatten: true, selector: 'igc-select-item' })
], IgcSelectGroupComponent.prototype, "items", void 0);
__decorate([
    queryAssignedElements({
        flatten: true,
        selector: 'igc-select-item:not([disabled])',
    })
], IgcSelectGroupComponent.prototype, "activeItems", void 0);
__decorate([
    property({ reflect: true, type: Boolean })
], IgcSelectGroupComponent.prototype, "disabled", void 0);
__decorate([
    watch('disabled', { waitUntilFirstUpdate: true })
], IgcSelectGroupComponent.prototype, "updateDisabled", null);
//# sourceMappingURL=select-group.js.map