import { PropertyValueMap } from 'lit';
import { Constructor } from '../common/mixins/constructor.js';
import IgcDropdownComponent, { IgcDropdownEventMap } from '../dropdown/dropdown.js';
import IgcInputComponent from '../input/input.js';
import IgcSelectGroupComponent from './select-group.js';
import IgcSelectItemComponent from './select-item.js';
import type { ThemeController, Theme } from '../../theming/types.js';
export interface IgcSelectEventMap extends IgcDropdownEventMap {
    igcFocus: CustomEvent<void>;
    igcBlur: CustomEvent<void>;
}
declare const IgcSelectComponent_base: import("../common/mixins/constructor.js").AbstractConstructor<import("../common/mixins/event-emitter.js").EventEmitterInterface<IgcSelectEventMap>> & Constructor<IgcDropdownComponent>;
/**
 * @element igc-select
 *
 * @slot - Renders the list of select items.
 * @slot prefix - Renders content before the input.
 * @slot suffix - Renders content after input.
 * @slot header - Renders a container before the list of options.
 * @slot footer - Renders a container after the list of options.
 * @slot helper-text - Renders content below the input.
 * @slot toggle-icon - Renders content inside the suffix container.
 *
 * @fires igcFocus - Emitted when the select gains focus.
 * @fires igcBlur - Emitted when the select loses focus.
 * @fires igcChange - Emitted when the control's checked state changes.
 * @fires igcOpening - Emitted just before the list of options is opened.
 * @fires igcOpened - Emitted after the list of options is opened.
 * @fires igcClosing - Emitter just before the list of options is closed.
 * @fires igcClosed - Emitted after the list of options is closed.
 *
 * @csspart list - The list of options wrapper.
 * @csspart input - The encapsulated igc-input.
 * @csspart label - The encapsulated text label.
 * @csspart prefix - The prefix wrapper.
 * @csspart suffix - The suffix wrapper.
 * @csspart toggle-icon - The toggle icon wrapper.
 * @csspart helper-text - The helper text wrapper.
 */
export default class IgcSelectComponent extends IgcSelectComponent_base {
    /** @private */
    static readonly tagName = "igc-select";
    static styles: import("lit").CSSResult;
    private searchTerm;
    private lastKeyTime;
    protected themeController: ThemeController;
    protected theme: Theme;
    private readonly targetKeyHandlers;
    protected items: Array<IgcSelectItemComponent>;
    protected groups: Array<IgcSelectGroupComponent>;
    protected helperText: Array<HTMLElement>;
    protected inputSuffix: Array<HTMLElement>;
    protected inputPrefix: Array<HTMLElement>;
    protected selectedItem: IgcSelectItemComponent | null;
    protected target: IgcInputComponent;
    /**
     * The value attribute of the control.
     * @attr
     */
    value?: string | undefined;
    /**
     * The name attribute of the control.
     * @attr
     */
    name: string;
    /**
     * The disabled attribute of the control.
     * @attr
     */
    disabled: boolean;
    /**
     * The required attribute of the control.
     * @attr
     */
    required: boolean;
    /**
     * The invalid attribute of the control.
     * @attr
     */
    invalid: boolean;
    /**
     * The outlined attribute of the control.
     * @attr
     */
    outlined: boolean;
    /**
     * The autofocus attribute of the control.
     * @attr
     */
    autofocus: boolean;
    /**
     * The label attribute of the control.
     * @attr
     */
    label: string;
    /**
     * The placeholder attribute of the control.
     * @attr
     */
    placeholder: string;
    /**
     * Whether the dropdown's width should be the same as the target's one.
     * @attr same-width
     */
    sameWidth: boolean;
    /**
     * The direction attribute of the control.
     * @attr
     */
    dir: 'ltr' | 'rtl' | 'auto';
    constructor();
    protected themeAdopted(controller: ThemeController): void;
    protected willUpdate(changes: PropertyValueMap<any>): void;
    /** Override the dropdown target focusout behavior to prevent the focus from
     * being returned to the target element when the select loses focus. */
    protected handleFocusout(): void;
    /** Sets focus on the component. */
    focus(options?: FocusOptions): void;
    /** Removes focus from the component. */
    blur(): void;
    /** Checks the validity of the control and moves the focus to it if it is not valid. */
    reportValidity(): boolean;
    /** Checks the validity of the control. */
    checkValidity(): boolean;
    firstUpdated(): Promise<void>;
    protected updateValue(): void;
    protected updateSelected(): void;
    protected validate(): void;
    protected selectNext(): void;
    protected selectPrev(): void;
    protected selectInteractiveItem(index: number): void;
    protected searchItem(event: KeyboardEvent): void;
    protected handleFocus(): void;
    protected handleBlur(): void;
    protected onTargetTabKey(): void;
    protected onTargetEnterKey(): void;
    protected onTargetArrowLeftKeyDown(): void;
    protected onTargetArrowRightKeyDown(): void;
    protected onTargetArrowUpKeyDown(event: KeyboardEvent): void;
    protected onTargetArrowDownKeyDown(event: KeyboardEvent): void;
    protected onTargetHomeKey(): void;
    protected onTargetEndKey(): void;
    protected handleTargetKeyDown(event: KeyboardEvent): void;
    protected get hasPrefixes(): boolean;
    protected get hasSuffixes(): boolean;
    protected render(): import("lit-html").TemplateResult<1>;
}
declare global {
    interface HTMLElementTagNameMap {
        'igc-select': IgcSelectComponent;
    }
}
export {};
