var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { html, LitElement } from 'lit';
import { property, state } from 'lit/decorators.js';
import { unsafeSVG } from 'lit/directives/unsafe-svg.js';
import { alternateName } from '../common/decorators/alternateName.js';
import { blazorInclude } from '../common/decorators/blazorInclude.js';
import { watch } from '../common/decorators/watch.js';
import { SizableMixin } from '../common/mixins/sizable.js';
import { styles } from './icon.material.css.js';
import { IconsRegistry, registerIcon as registerIcon_impl, registerIconFromText as registerIconFromText_impl, } from './icon.registry.js';
export default class IgcIconComponent extends SizableMixin(LitElement) {
    constructor() {
        super();
        this.svg = '';
        this.name = '';
        this.collection = 'default';
        this.mirrored = false;
        this.iconLoaded = (name, collection) => {
            if (this.name === name && this.collection === collection) {
                this.getIcon();
            }
        };
        this.size = 'medium';
    }
    connectedCallback() {
        super.connectedCallback();
        if (!this.hasAttribute('role')) {
            this.setAttribute('role', 'img');
        }
        IconsRegistry.instance().subscribe(this.iconLoaded);
    }
    disconnectedCallback() {
        IconsRegistry.instance().unsubscribe(this.iconLoaded);
        super.disconnectedCallback();
    }
    iconChanged(prev, curr) {
        if (prev !== curr) {
            this.getIcon();
        }
    }
    getIcon() {
        const svg = this.name && this.collection
            ? IconsRegistry.instance().getIcon(this.name, this.collection)
            : '';
        this.svg = svg !== null && svg !== void 0 ? svg : '';
    }
    render() {
        return html ` ${unsafeSVG(this.svg)} `;
    }
    async registerIcon(name, url, collection = 'default') {
        await registerIcon_impl(name, url, collection);
    }
    registerIconFromText(name, iconText, collection = 'default') {
        registerIconFromText_impl(name, iconText, collection);
    }
}
IgcIconComponent.tagName = 'igc-icon';
IgcIconComponent.styles = styles;
__decorate([
    state()
], IgcIconComponent.prototype, "svg", void 0);
__decorate([
    property(),
    alternateName('iconName')
], IgcIconComponent.prototype, "name", void 0);
__decorate([
    property()
], IgcIconComponent.prototype, "collection", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], IgcIconComponent.prototype, "mirrored", void 0);
__decorate([
    watch('name'),
    watch('collection')
], IgcIconComponent.prototype, "iconChanged", null);
__decorate([
    blazorInclude()
], IgcIconComponent.prototype, "registerIcon", null);
__decorate([
    blazorInclude()
], IgcIconComponent.prototype, "registerIconFromText", null);
//# sourceMappingURL=icon.js.map