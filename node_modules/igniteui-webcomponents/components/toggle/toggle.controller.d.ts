import { ReactiveController, ReactiveControllerHost } from 'lit';
import { IgcToggleDirective } from './toggle.directive.js';
import type { DirectiveResult } from 'lit/directive';
import type { IgcToggleComponent } from './types.js';
type ToggleHost = ReactiveControllerHost & IgcToggleComponent & HTMLElement;
/**
 * Toggle controller configuration
 */
interface ToggleControllerConfig {
    /** The element, relative to which, the toggle will be positioned. */
    target?: HTMLElement;
    /**
     * The function to call when closing the toggle element from an user interaction (scroll, click).
     */
    closeCallback?: Function;
}
/**
 * Controller, bundling the creation of a toggle directive and handling global events,
 * related to the configuration of togglable components.
 */
export declare class IgcToggleController implements ReactiveController {
    private host;
    private sourceElement?;
    private initialScrollTop;
    private initialScrollLeft;
    private _target;
    private _hide?;
    private _abortController;
    /**
     *  Abort controller used to clean up document level event listeners
     *  See https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#add_an_abortable_listener
     */
    protected get abortController(): AbortController;
    /** The directive that marks the toggle. */
    toggleDirective: DirectiveResult<typeof IgcToggleDirective>;
    rendered: Promise<void>;
    set target(value: HTMLElement);
    /** The element, relative to which, the toggle will be positioned. */
    get target(): HTMLElement;
    constructor(host: ToggleHost, config?: ToggleControllerConfig);
    hostDisconnected(): void;
    update(): void;
    protected hide(): void;
    private addEventListeners;
    private configureListeners;
    private blockScroll;
    /** The document's click event handler to override in the host component if necessary. */
    private documentClicked;
    /** The document's scroll event handler to override in the host component if necessary. */
    private handleScroll;
}
export {};
