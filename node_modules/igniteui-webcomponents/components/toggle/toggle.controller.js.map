{"version":3,"file":"toggle.controller.js","sourceRoot":"","sources":["../../../src/components/toggle/toggle.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { ReactiveController, ReactiveControllerHost } from 'lit';\nimport { igcToggle, IgcToggleDirective } from './toggle.directive.js';\nimport type { DirectiveResult } from 'lit/directive';\nimport type { IgcToggleComponent } from './types.js';\n\ntype ToggleHost = ReactiveControllerHost & IgcToggleComponent & HTMLElement;\n\n/**\n * Toggle controller configuration\n */\ninterface ToggleControllerConfig {\n  /** The element, relative to which, the toggle will be positioned. */\n  target?: HTMLElement;\n  /**\n   * The function to call when closing the toggle element from an user interaction (scroll, click).\n   */\n  closeCallback?: Function;\n}\n\n/* blazorSuppress */\n/**\n * Controller, bundling the creation of a toggle directive and handling global events,\n * related to the configuration of togglable components.\n */\nexport class IgcToggleController implements ReactiveController {\n  private host: IgcToggleComponent & HTMLElement;\n  private sourceElement?: Element;\n  private initialScrollTop = 0;\n  private initialScrollLeft = 0;\n  private _target!: HTMLElement;\n  private _hide?: Function;\n  private _abortController = new AbortController();\n\n  /**\n   *  Abort controller used to clean up document level event listeners\n   *  See https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#add_an_abortable_listener\n   */\n  protected get abortController() {\n    if (this._abortController.signal.aborted) {\n      this._abortController = new AbortController();\n    }\n    return this._abortController;\n  }\n\n  /** The directive that marks the toggle. */\n  public toggleDirective!: DirectiveResult<typeof IgcToggleDirective>;\n  public rendered!: Promise<void>;\n\n  public set target(value: HTMLElement) {\n    this._target = value;\n    this.update();\n  }\n\n  /** The element, relative to which, the toggle will be positioned. */\n  public get target() {\n    return this._target;\n  }\n\n  constructor(host: ToggleHost, config?: ToggleControllerConfig) {\n    (this.host = host).addController(this);\n\n    if (config?.target) {\n      this._target = config.target;\n    }\n\n    if (config?.closeCallback) {\n      this._hide = config.closeCallback;\n    }\n\n    this.update();\n  }\n\n  public hostDisconnected() {\n    this.abortController.abort();\n  }\n\n  public update() {\n    this.toggleDirective = igcToggle(this.target, this.host, this);\n    this.configureListeners();\n  }\n\n  protected hide() {\n    this._hide ? this._hide() : this.host.hide();\n  }\n\n  private addEventListeners() {\n    const options: AddEventListenerOptions = {\n      capture: true,\n      signal: this.abortController.signal,\n    };\n\n    if (!this.host.keepOpenOnOutsideClick) {\n      document.addEventListener('click', this.documentClicked, options);\n    }\n\n    document.addEventListener('scroll', this.handleScroll, options);\n  }\n\n  private configureListeners() {\n    this.host.open ? this.addEventListeners() : this.abortController.abort();\n  }\n\n  private blockScroll = (event: Event) => {\n    event.preventDefault();\n    if (!this.sourceElement || this.sourceElement !== event.target) {\n      this.sourceElement = event.target as Element;\n      this.initialScrollTop =\n        this.sourceElement.scrollTop ??\n        this.sourceElement.firstElementChild?.scrollTop;\n      this.initialScrollLeft =\n        this.sourceElement.scrollLeft ??\n        this.sourceElement.firstElementChild?.scrollLeft;\n    }\n\n    this.sourceElement.scrollTop = this.initialScrollTop;\n    this.sourceElement.scrollLeft = this.initialScrollLeft;\n    if (this.sourceElement.firstElementChild) {\n      this.sourceElement.firstElementChild.scrollTop = this.initialScrollTop;\n      this.sourceElement.firstElementChild.scrollLeft = this.initialScrollLeft;\n    }\n  };\n\n  /** The document's click event handler to override in the host component if necessary. */\n  private documentClicked = (event: MouseEvent) => {\n    if (!this.host.keepOpenOnOutsideClick) {\n      const tree = event.composed ? event.composedPath() : [event.target];\n\n      if (tree.includes(this.host) || tree.includes(this.target)) {\n        return;\n      }\n\n      this.hide();\n    }\n  };\n\n  /** The document's scroll event handler to override in the host component if necessary. */\n  private handleScroll = (event: Event) => {\n    switch (this.host.scrollStrategy) {\n      case 'scroll':\n        break;\n      case 'block':\n        this.blockScroll(event);\n        break;\n      case 'close':\n        this.hide();\n        break;\n    }\n  };\n}\n"]}