{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../src/components/toggle/types.ts"],"names":[],"mappings":"","sourcesContent":["/**\n * Common events interface for toggle components\n */\nexport interface IgcToggleEventMap {\n  igcOpening: CustomEvent<void>;\n  igcOpened: CustomEvent<void>;\n  igcClosing: CustomEvent<void>;\n  igcClosed: CustomEvent<void>;\n}\n/**\n * Interface describing the options for toggle components' configuration.\n */\nexport interface IgcToggleOptions {\n  /**\n   * Whether the toggle is open.\n   */\n  open: boolean;\n  /**\n   * The preferred placement of the toggle element around the target element. */\n  placement?: IgcPlacement;\n  /**\n   * The positioning strategy to use.\n   * Use the `fixed` strategy when the target element is in a fixed container, otherwise - use `absolute`.\n   */\n  positionStrategy?: 'absolute' | 'fixed';\n  /**\n   * Whether the element should be flipped to the opposite side once it's about to overflow the visible area.\n   * Once enough space is detected on its preferred side, it will flip back.\n   */\n  flip?: boolean;\n  /**\n   * Whether to prevent the element from being cut off by moving it so it stays visible within its boundary area.\n   */\n  distance?: number;\n  /**\n   * Whether to make the toggle the same width as the target.\n   */\n  sameWidth?: boolean;\n}\n\nexport interface IgcToggleComponent extends IgcToggleOptions {\n  scrollStrategy?: 'scroll' | 'block' | 'close';\n  keepOpenOnOutsideClick?: boolean;\n\n  hide(): void;\n  show(): void;\n  toggle(): void;\n}\n\n/**\n * Describes the preferred placement of a toggle component.\n */\nexport type IgcPlacement =\n  | 'top'\n  | 'top-start'\n  | 'top-end'\n  | 'bottom'\n  | 'bottom-start'\n  | 'bottom-end'\n  | 'right'\n  | 'right-start'\n  | 'right-end'\n  | 'left'\n  | 'left-start'\n  | 'left-end';\n"]}