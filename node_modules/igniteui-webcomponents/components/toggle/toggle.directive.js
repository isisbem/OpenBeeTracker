import { computePosition, flip, offset, shift, size, } from '@floating-ui/dom';
import { directive, Directive, PartType, } from 'lit/directive.js';
import { noChange } from 'lit';
export class IgcToggleDirective extends Directive {
    updatePosition(target, options, controller) {
        var _a, _b;
        this.floatingElement = this.createFloatingElement(options.open);
        if (!target) {
            if (controller) {
                controller.rendered = Promise.resolve();
            }
            return noChange;
        }
        const promise = computePosition(target, this.floatingElement, {
            placement: (_a = options.placement) !== null && _a !== void 0 ? _a : 'bottom-start',
            strategy: (_b = options.positionStrategy) !== null && _b !== void 0 ? _b : 'absolute',
            middleware: this.createMiddleware(options),
        }).then(({ x, y }) => {
            Object.assign(this.floatingElement.style, {
                left: 0,
                top: 0,
                transform: `translate(${x}px,${y}px)`,
            });
        });
        if (controller) {
            controller.rendered = promise;
        }
        return noChange;
    }
    createFloatingElement(open = false) {
        if (!this.floatingElement) {
            this.floatingElement = this.part.element;
        }
        this.floatingElement.style.display = open ? '' : 'none';
        return this.floatingElement;
    }
    createMiddleware(options) {
        const middleware = [];
        if (options.distance) {
            middleware.push(offset({
                mainAxis: options.distance,
            }));
        }
        if (options.flip) {
            middleware.push(flip());
        }
        if (this.shiftOptions) {
            middleware.push(shift(this.shiftOptions));
        }
        Object.assign(this.floatingElement.style, { width: '' });
        if (options.sameWidth) {
            const floatingElement = this.floatingElement;
            middleware.push(size({
                apply: (args) => {
                    const { rects } = args;
                    Object.assign(floatingElement.style, {
                        width: `${rects.reference.width}px`,
                    });
                },
            }));
        }
        return middleware;
    }
    constructor(partInfo) {
        super(partInfo);
        this.shiftOptions = {
            mainAxis: true,
        };
        this.part = partInfo;
        if (partInfo.type !== PartType.ELEMENT) {
            throw new Error('The `igcToggle` directive must be attached to an element tag.');
        }
    }
    render(target, options, controller) {
        return this.updatePosition(target, options, controller);
    }
}
export const igcToggle = directive(IgcToggleDirective);
//# sourceMappingURL=toggle.directive.js.map